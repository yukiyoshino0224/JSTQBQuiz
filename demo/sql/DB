--テーブル削除
DROP TABLE IF EXISTS choices, questions CASCADE;

-------------

CREATE TABLE questions (
    id SERIAL PRIMARY KEY,
    chapter INT NOT NULL,
	chapter_title TEXT NOT NULL,
    question TEXT NOT NULL,
    explanation TEXT
);

CREATE TABLE choices (
    id SERIAL PRIMARY KEY,
    question_id INT NOT NULL,
    choice_text VARCHAR(255) NOT NULL,
    is_correct BOOLEAN NOT NULL,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
);

-------------

INSERT INTO questions (chapter, chapter_title, question, explanation) 
VALUES 
(1, 'テストの基礎', 'すべてのプロジェクトに共通するテストの目的として、適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(1, 'テストの基礎', 'テストとデバッグの違いとして最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(1, 'テストの基礎', 'テストにより欠陥を発見し、リリース前にそれを取り除くことで、運用に入ってから故障が起きたり、ステークホルダーのニーズに合致しなかったりするリスクを低減できる。それを効果的に行うには、テスト担当者がソフトウェア開発ライフサークルの各フェーズに関与することが大切である。各フェーズに対する関与の仕方として、適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(1, 'テストの基礎', '品質保証(QA)と品質コントロール(QC)、テスト、および品質マネジメント(QMS)の関係で最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(1, 'テストの基礎', 'エラーと欠陥と故障の関係で適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')

,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'ソフトウェア開発ライフサイクルモデルとテストの関係として、最も適切なものはどれか。次の選択肢から1つ選びなさい。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'どのようなソフトウェア開発ライフサイクルにも共通する、よいテストの実践として、最も最適なものはどれか。次の選択肢から1つ選びなさい。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のテスト駆動開発の説明における①に当てはまる用語として、最も適切なものはどれか。次の選択肢から1つ選びなさい。テスト駆動開発では、テストを最初に書き、次にテストを満たすようにコードを書き、そしてテストとコードを（①）する。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'テストをする観点から見たDevOpsの利点として、最も最適なものはどれか。次の選択肢から1つ選びなさい。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'シフトレフトアプローチの説明として、最も適切なものはどれか。次の選択肢から1つ選びなさい。', '')

,(3, '静的テスト', '静的テストには、レビューと静的解析があり、ほとんどの作業成果物がテスト対象となる。静的テストの説明として適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(3, '静的テスト', '次の中で静的テストの利点として適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(3, '静的テスト', '静的テストと動的テストの違いを説明する文章として、適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(3, '静的テスト', 'レビュープロセスを説明する文章として適切でないものものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(3, '静的テスト', 'レビューにおける参加者の役割と責務を説明する文章として、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')

,(4, 'テスト分析と解析', 'テスト技法の分類を説明する文章の中で最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(4, 'テスト分析と解析', '状態遷移テストはブラックボックステスト技法の1つである。状態遷移テストを説明する文章の中で適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(4, 'テスト分析と解析', '状態遷移図および状態遷移表に基づく状態遷移テストを説明する文書の中で適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(4, 'テスト分析と解析', 'ステートメントテストとブランチテストは、代表的なホワイトボックステスト技法である。この2つのテスト技法を説明する文章の中で、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(4, 'テスト分析と解析', 'エラー推測と探索的テストは、代表的な経験ベースのテスト技法である。この2つのテスト技法を説明する文章の中で最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')

,(5, 'テスト活動のマネジメント', 'イテレーティブ開発モデルにおける計画プロセスを説明する文章の中で、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(5, 'テスト活動のマネジメント', 'テスト工数の見積もり技法を説明する文章の中で、外挿を説明しているものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(5, 'テスト活動のマネジメント', 'テスト計画書はテスト活動を概説するものである。テスト計画書に記載すべき内容として適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(5, 'テスト活動のマネジメント', 'テストをいつ開始するか、いつ終了するかを判断するために、テストの開始基準と終了基準を定義することは重要である。この2つを説明する文章の中で適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(5, 'テスト活動のマネジメント', 'テスト工数を見積もる上で適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')

,(6, 'テストツール', 'テスト活動を支援するテストツールには様々な種類がある。テストツールの分類の説明として、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(6, 'テストツール', 'テスト自動化ツールには利点もあるがリスクもある。テスト自動化ツールの利点とリスクの説明として、適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')

,(1, 'テストの基礎', 'テスト実行前の作業に関する記述のうち、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(1, 'テストの基礎', 'テストの7原則の1つ「欠陥の偏在」の説明として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(1, 'テストの基礎', 'SDLCの成果物に対するトレーサビリティについて説明したものとして、適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(1, 'テストの基礎', '開発担当者の心理に影響を与える「確証バイアス」の説明として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(1, 'テストの基礎', 'ソフトウェア開発プロセスにおいて、テスト活動が最も効果的にバグを予防できるタイミングはいつか。次の選択肢の中から1つ選びなさい。', '')

,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のテストは、どのテストレベルに関する記述か。最も適切なものを次の選択肢から1つ選びなさい。分離可能なソフトウェアに対して、モックオブジェクト、シミュレーター等を用いてシステムのその他部分と切り離してテストを行う。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のうち、非機能テストとして適切でないものはどれか。次の選択肢から1つ選びなさい。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'V字モデルにおいて、「受け入れテスト」はどの段階と対応するか。次の選択肢から1つ選びなさい。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のうち、「影響度分析」の説明として最も適切なものはどれか。次の選択肢から1つ選びなさい。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のうち、「受け入れテスト」の特徴として適切でないものはどれか。次の選択肢から1つ選びなさい。', '')

,(3, '静的テスト', '次のうち、レビュータイプとして適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(3, '静的テスト', '次のうち、レビュー技法として適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(3, '静的テスト', 'レビューアがステークホルダーになりきってレビューする方法は「パースペクティブベース」と他にどれか。次の選択肢の中から1つ選びなさい。', '')
,(3, '静的テスト', 'レビューの目的として適切でないものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(3, '静的テスト', '「インスペクション」に最も適切な特徴はどれか。次の選択肢の中から1つ選びなさい。', '')

,(4, 'テスト分析と解析', 'あるアプリで「パスワードの長さは8文字以上、20文字以下」と仕様で定められている。境界値分析における代表的なテストケースの組み合わせとして最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(4, 'テスト分析と解析', 'あるシステムでは、入力値が複雑で正しい入力のルールも明確である。この場合、最も適切なブラックボックステスト技法はどれか。次の選択肢の中から1つ選びなさい。', '')
,(4, 'テスト分析と解析', 'エラー推測を適用するのに最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(4, 'テスト分析と解析', 'コードに対して「ステートメントカバレッジ」100%を達成しても、必ずしも発見できない欠陥がある理由として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(4, 'テスト分析と解析', '同値分割と境界値分析の違いを最も正しく表しているものはどれか。次の選択肢の中から1つ選びなさい。', '')

,(5, 'テスト活動のマネジメント', '独立したテストの利点として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(5, 'テスト活動のマネジメント', '独立したテストの欠点として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(5, 'テスト活動のマネジメント', 'テスト戦略の「プロセス準拠」の説明として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(5, 'テスト活動のマネジメント', 'テストレポートとして最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(5, 'テスト活動のマネジメント', 'プロダクトリスクとプロジェクトリスクの違いについて最も適切ものはどれか。次の選択肢の中から1つ選びなさい。', '')

,(6, 'テストツール', '要件や、テストで発見した欠陥などを管理することを目的としたツールとして、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(6, 'テストツール', 'プローブ効果とは何か。最も適切なものを次の選択肢の中から1つ選びなさい。', '')
,(6, 'テストツール', 'テスト自動化の利点の説明として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(6, 'テストツール', 'テストツールを導入した後、その効果を測定する方法として最も適切なものはどれか。選択肢の中から1つ選びなさい。', '')
,(6, 'テストツール', 'テストツールを選定した後、まず小規模なパイロットプロジェクトで試行的に導入する理由として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(6, 'テストツール', 'テスト実行ツールで大きな効果を得るためのアプローチとして、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(6, 'テストツール', 'テストツール導入の成功要因として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(6, 'テストツール', 'テストツールを選定する際に、最も重視すべき基準はどれか。次の選択肢の中から1つ選びなさい。', '');


INSERT INTO choices (question_id, choice_text, is_correct) 
VALUES 
(1, '要件、ユーザーストーリー、設計、およびコードなどの作業成果物を評価することによって欠陥を防ぐ。', FALSE), 
(1, 'コード変更からリリースまでの処理を自動化して作業効率を高める。', TRUE), 
(1, 'テスト対象が完成したことを確認し、ユーザーやその他ステークホルダーの期待どおりの動作内容であることの妥当性を確認する。', FALSE), 
(1, '欠陥や故障を発見し、ソフトウェアの品質が不適切になるリスクレベルを軽減する。', FALSE),

(2, 'テストはソフトウェアに存在する欠陥を見つけることで、デバッグはそれに加えて、解析して取り除くまでの一連の作業が含まれる。', TRUE), 
(2, 'テストはコンポーネント内の欠陥を見つけることで、デバッグはコンポーネント間の連携部分の欠陥を見つけること。', FALSE), 
(2, 'テストはソフトウェアを動作させて故障を見つけ、その原因を探って欠陥を見つけることで、デバッグはソフトウェアを動作させないで直接欠陥を見つけること。', FALSE), 
(2, 'テストはコードを修正した際に正しく修正されたことを確認することで、デバッグはその修正により既存官箇所に予期せぬ影響が発生していないかを確認すること。', FALSE),

(3, 'テスト担当者が要件レビューやユーザーストーリーの洗練作業に関与することにより、開発担当者と異なる視点でこれらの作業成果物の欠陥を検出できる。', FALSE), 
(3, 'システム設計時にテスト担当者が設計担当者と密接に連携して作業することにより、両者が設計とその設計をどうテストするかに対する理解を深めることができる。', FALSE), 
(3, 'コード開発者にテスト担当者が開発担当者と密接に連携することにより、テストで見つかった欠陥をテスト担当者自らが効率よく取り除くことができる。', TRUE), 
(3, 'テスト担当者が要件定義のレビューに参加すると、テスト担当者の知見を活かした提案ができ、要件定義作業に貢献できる。', FALSE),

(4, '品質マネジメントは、品質が適切なレベルに到達していることを示すために、テストを含む必要なプロセス全体を実行する必要がある。', FALSE), 
(4, '品質コントロールは、品質が適切なレベルに到達するようにテストを含む適切な作業を行うことである。', TRUE), 
(4, 'テストは、品質保証と品質コントロールの両方を含む上位概念で品質に関して組織の方針を示し、組織をコントロールするための活動をすべて含む。', FALSE), 
(4, '品質保証は、ソフトウェアの品質を評価し、運用環境でソフトウェアの故障が発生するリスクを低減する1つの手段である。', FALSE),

(5, '人間はエラー(誤り)を起こす。そのエラーが作業成果物の欠陥(フォールトまたはバグ)となる。', FALSE), 
(5, '欠陥のあるコードが実行されると、故障が発生することがある。そのため故障ができるだけ発生しないように欠陥を見つけるのがテストの役割である。', FALSE), 
(5, '故障が起きたからといって、必ずコードの中に欠陥があるとは限らない。環境条件やハードウェアの構成変更などにより故障が起きる場合もある。', FALSE), 
(5, 'テストにより欠陥でないものを欠陥とすることを偽陰性(誤検出)といい、検出すべき欠陥を検出しないことを偽陽性(検出漏れ)という。', TRUE),

(6, 'シーケンシャル開発モデルでは、SDLCの初期段階において、要件レビュー、テスト分析、およびテスト設計に参加し、動的テストの実行まで行う。', FALSE), 
(6, 'イテレーティブ開発モデルでは、核イテレーションで静的テストと動的テストのどちらかを実行し、リリースまでに両方が行われるようにする。', FALSE), 
(6, 'インクリメンタル開発モデルでは、インクリメントを頻繁に提供するために、迅速なフィードバックと広範なリグレッションテストが必要となる。', TRUE), 
(6, 'アジャイルソフトウェア開発ではテスト自動化を充実させるとともに、手動テストはホワイトボックステスト技法を使用して行われる傾向がある。', FALSE),

(7, 'すべてのテストレベルの目的は共通である。', FALSE), 
(7, '各テストレベルのテスト分析や設計は、対応するSDLCの開発フェーズが始まる前に開始する。', FALSE), 
(7, '開発活動の作業成果物のドラフトができたらすぐにテスト担当者がレビューに関与する。', TRUE), 
(7, '各開発活動に対応したテスト活動を品質コントロールの対象とし、開発活動は品質コントロールの対象外とする。', FALSE),

(8, 'リグレッション', FALSE), 
(8, 'リファクタリング', TRUE), 
(8, '継続的インテグレーション', FALSE), 
(8, 'フィードバック', FALSE),

(9, 'コード品質を迅速にフィードバックする。', TRUE), 
(9, 'ユーザーの視点からのテストを自動化する。', FALSE), 
(9, '非機能品質特性に対する観点を減らす。', FALSE), 
(9, 'テスト自動化の確立と保守を容易にする。', FALSE),

(10, 'テスト仕様書のレビューに開発担当者が関与する。', FALSE), 
(10, '動的テストの前にソースコードの静的解析を完了する。', TRUE), 
(10, 'コンポーネントテストレベルでブラックボックステスト技法を用いる。', FALSE), 
(10, 'リグレッションテストをコンポーネントテストレベルから開始する。', FALSE),

(11, 'レビューの対象には、仕様書はユーザーストーリー、ユーザーガイドなどの作業成果物だけでなく、コードも含まれる。', FALSE), 
(11, '静的解析ツールを使うと、コードやモデルなどの構造的な作業成果物に対して効率的にテストができる。一方、レビューを行えば、自然言語で記述された作業成果物に対して、誤字脱字、文法、読みやすさを評価することができる。', FALSE), 
(11, 'テスト計画書やテストケースなどのテストウェアはシステム開発の作業成果物ではなく、テストのための成果物である。そのため、これらは静的テストの対象に含まれない。', TRUE), 
(11, '静的解析は、航空や医療などのセーフティクリティカルシステムだけでなく、他の分野のシステムでも重要かつ一般的になってきている。', FALSE),

(12, '動的テスト実行する前に欠陥を早期に検出できる。', FALSE), 
(12, '動的テストでは容易に検出できない欠陥を識別できる。', FALSE), 
(12, 'テストプロシージャ―とテスト実行の突き合せによりテストカバレッジを計測できる。', TRUE), 
(12, '設計の改善や保守性の高いコードに貢献することで、開発やメンテナンスの生産性を向上できる。', FALSE),

(13, '動的テストは保守性の欠陥を検出するのに向いており、静的テストは機能的欠陥を検出するのに向いている。', TRUE), 
(13, '動的テストはソフトウェアを実行して発生した故障をもとに欠陥を見つけるが、静的テストは作業成果物の欠陥を直接検出できる。', FALSE), 
(13, '動的テストは外部から見える振る舞いに焦点を置くことが多いが、静的テストは作業成果物の整合性と内部品質を向上させる特徴を持つ。', FALSE), 
(13, '静的テストと動的テストは、それぞれ異なる種類の欠陥を検出できるため、相互に補完する関係にある。', FALSE),

(14, '計画プロセスの主な作業は、レビューの目的、レビュー対象のドキュメント、評価すべき品質特性を定義することである。', FALSE), 
(14, '修正と報告プロセスの主な作業は、作業成果物をレビューして、不正な点、提案、質問を書き出すことである。', TRUE), 
(14, '共有と分析プロセスの主な作業は、識別した不正を分析し、それらにオーナーとステータスと必要なアクションを割り当て、品質特性を評価して文書化し、これらの情報をもとにレビュー判定することである。', FALSE), 
(14, 'レビューの立ち上げプロセスは、個々のレビューに入る前に参加者同士で情報を共有する作業である。具体的には、作業成果物を参加者に共有した上でレビューの範囲を説明し、参加者からの質問に答えて意思疎通を図るなどである。', FALSE),

(15, 'マネージャーは、作業成果物のレビューを行って不正を識別する。', FALSE), 
(15, 'レビューアとは、レビュー対象の作業成果物を作成した人のことである。レビューで指摘されて不正を識別したら、自分の作った作業成果物を修正する。', FALSE), 
(15, 'モデレーターは、効果的なレビューミーティングを運営する人である。参加者の様々な意見の調整を行い、レビューを成功に導く役割を担う。', TRUE), 
(15, 'レビューリーダーは、レビューの計画を行う人である。レビューの計画を立て、実行を決定する。また、不適切な結果が発生した場合は、適切にコントロールする役割を担う。', FALSE),

(16, 'ホワイトボックステスト技法は、テストベースを分析して適切なテスト条件を作成し、テスト対象のソフトウェアの振る舞いに焦点を当てたテストである。', FALSE), 
(16, 'ブラックボックステスト技法は、テスト対象の内部構造と処理に重点を置いたテストで、構造ベースの技法ともよばれている。', FALSE), 
(16, '経験ベースのテスト技法は、テスト担当者のスキルと直感、および経験を基にテストする方法である。技法という名前はついているが、担当者に任せる方法なので、特定のやり方、技法があるわけではない。', FALSE), 
(16, 'ブラックボックステスト技法は機能テストと非機能テストの両方に適用できる。', TRUE),

(17, '状態遷移テストは、画面の遷移に焦点を当てたテストで、ある画面から別の画面に正しく画面が切り替わることを確認するものである。', TRUE), 
(17, '状態遷移テストは、コンポーネントやシステムの状態がイベントによってどのように変化するかに焦点を当てたテストで、組み込みソフトウェア業界で幅広く使われている。', FALSE), 
(17, '状態遷移テストで使用する状態遷移表には、状態間の有効な遷移と無効だと思われる遷移の両方を記載する。', FALSE), 
(17, '状態遷移の有効遷移カバレッジは、テスト対象の状態が有効に遷移する数の合計数のうち、テストでカバーした遷移の数の割合で計測する。', FALSE),

(18, '有効遷移カバレッジ100%は全遷移カバレッジ100%を保証しないが、全状態カバレッジ100%は、有効遷移カバレッジ100％を保証する。', TRUE), 
(18, '全状態カバレッジとは、テストで通過した状態の数をすべての状態の数で割った値である。', TRUE), 
(18, '100%の全遷移カバレッジを達成するためには、すべての有効遷移だけでなく、無効遷移もテストで通過しなければならないが、無効遷移はテスト実行を試みることが可能なものだけでよい。', FALSE), 
(18, '通常、状態遷移図は有効遷移を記載するが、状態遷移表は有効遷移に加えて無効遷移も表現できるので、全遷移カバレッジを測定しやすい。', FALSE),

(19, 'ブランチテストは、システムが実装すべきビジネスルールを表現するのに適したデシジョンテーブルを作成してテストする技法である。', FALSE), 
(19, 'ステートメントテストは、ステートメント (コード内の文)を通すテストであり、コード内の命令と判定すべてを最低一回は通るようにテストするテスト技法である。', FALSE), 
(19, 'ステートメントテストのカバレッジ100%は、ブランチテストのカバレッジ100%を保証しないが、ブランチテスト100%は、ステートメントテストのカバレッジ100%を保証する。', TRUE), 
(19, 'ブランチテストは、コード内の判定を最低1回は通るようにテストするものなので、判定結果が真と偽の2つある場合は、どちらか1つを通せばよい。', FALSE),

(20, 'エラー推測は、テストデータを複数のパーティションに分類して、各パーティションの代表的な要素だけをテストする技法である。', FALSE), 
(20, '探索的テストは形式的ではないテストであるが、活動を体系的に行うためにテストチャーターを作ってセッションベースドテストを行う場合がある。', TRUE), 
(20, '探索的テストはフォールト攻撃という系統的なアプローチを用い、最初に経験を用いて起こりうるエラー、欠陥、故障のリストを作り、それを引き起こすテストケースを設計する技法である。', FALSE), 
(20, 'エラー推測は、経験に基づいてチェックリストを作成し、それに基づいてテストする技法である。チェックリストは、テストケースに比べてハイレベルなテストである。', FALSE),

(21, 'リリース計画では、1回のイテレーションの終わりを見据えて、イテレーションのバックログを考慮した計画を立てる。', FALSE), 
(21, 'イテレーション計画は、プロダクトバックログの定義やユーザーストーリーの作成、受け入れ基準の作成を行うものである。', FALSE), 
(21, 'リリース計画はイテレーション計画に基づいてイテレーティブな開発が行われ、最後にリリースするタイミングで作成する。', FALSE), 
(21, 'リリース計画に関わるテスト担当者は、プロジェクトと品質のリスク分析やユーザーストーリーに関連するテスト工数の見積もり、テストアプローチの決定などを行う。', TRUE),

(22, '現在のプロジェクトの早い時期に見積もりが行われるもので、これまでにかかったテスト工数を観測し、それを基に数学モデルを適用してこれからの工数を見積もる方法である。', TRUE), 
(22, '複数の専門家が経験に基づいて工数を観測し、その結果を議論して合意したものを見積もりとする方法である。', FALSE), 
(22, '最も楽観的な推定値(a)、最も可能性の高い推定値(m)、最も悲観的な推定値(b)を専門家が作成し、一定の加重算術平均式により見積もりを得る方法である。', FALSE), 
(22, '組織内の過去の類似プロジェクトで収集されたテスト工数を基準にして、そのプロジェクトと新規プロジェクトの規模などに応じた比率をかけてテスト工数を見積もる方法である。', FALSE),

(23, 'テスト計画書には、テスト条件を落とし込んだものとしてテストケースやテストデータ、テスト環境、トレーサビリティなどの具体的な内容を記載する。', FALSE), 
(23, 'テスト計画書には、テストを行うのに必要なテストウェアとして、テストプロシージャ―やテストスイートなどを記載する。', FALSE), 
(23, 'テスト計画書には、テストの範囲や目的、リスクを決定したり、テストに対する包括的なアプローチを定義したりする内容が含まれる。', TRUE), 
(23, 'プロダクトのテスト計画は、プロダクトのライフサイクル全体を通して行う活動だが、メンテナンスフェーズまでは延長されない。', FALSE),

(24, '開始基準が満たされないままにテストを開始すると、難易度ば上がり、時間やコストが増え、リスクが高まる。', FALSE), 
(24, '終了基準が満たされていないままにテスト活動を終了すると、未解決の欠陥や潜在的な欠陥が多く残り、リリース後に故障を起こすリスクが高まる。', FALSE), 
(24, 'テスト終了基準では、テスト活動を終了するための達成条件を定義する。達成条件には、運用環境が準備できている、メンテナンスチームがアサインできている、ユーザー教育が終了しているなどがある。', TRUE), 
(24, 'テスト終了基準を満たしていない場合でもビジネスニーズによりステークホルダーがプロダクトをリリースするリスクを見直して受け入れた場合は、テスト活動を切り上げる場合もある。', FALSE),

(25, 'テスト工数に影響する要因には、プロダクトの特性、開発プロセスの特性、人の特性のほか、テストした結果も含まれる。検出した欠陥の数と重要度によって、再作業が必要となる場合があるからである。', FALSE), 
(25, 'プロダクトに関連するリスクが高い、テストベースの品質が悪い、プロダクトのく規模が大きい、品質特性の要件が厳しいなどは、どれもテスト工数を大きくする要因である。', FALSE), 
(25, '使用している開発モデルやテストプロセス、納期のタイトさなどは、基本的にテスト工数に影響しない。開発プロセスが変わっても、やるべきボリュームは一定である。', TRUE), 
(25, 'テストを見積もる技術には、メトリクスベースとエキスパートベースがある。外挿は前者の例で、ワイルドバンドデルファイは後者の例である。', FALSE),

(26, 'レビューや静的解析を支援するツールは、DevOpsツールに分類される。', FALSE), 
(26, 'リグレッションテストで使う実行ツールやコードカバレッジツールなどは、代表的な静的テストの支援ツールである。', FALSE), 
(26, 'ロードテストやストレステストなど、手動では効果的に実行できないテストを支援する性能テストツールは、テストウェアのマネジメント支援ツールに分類される。', FALSE), 
(26, 'テストケース作成支援ツールやテストデータ準備ツールなどは、テスト実装の支援ツールに分類される。', TRUE),

(27, 'テストケース作成支援ツールやテストデータ準備ツールなどは、テスト実装の支援ツールに分類される。', FALSE), 
(27, '静的解析やカバレッジなどのテスト自動化ツールの潜在的リスクとしては、テスト結果の評価の客観性が損なわれることが挙げられる。', TRUE), 
(27, 'テスト自動化ツールの潜在的リスクとしては、導入に要する時間やコスト、工数を過小評価することが挙げられる。', FALSE), 
(27, 'テスト自動化ツールの潜在的リスクとしては、テストツールの効果を課題に評価したり、ツールに過剰な依存をしたりすることが挙げられる。', FALSE),

(28, 'テスト前の作業は、実際にテストを実施するわけではないので、重要視しすぎることは避けるべきである。', FALSE), 
(28, 'テスト計画では、テストベースを分析し、何をテストするか決定する。', FALSE), 
(28, 'テスト設計では、テストの目的や終了基準を定義し、その後に全体のコンテキストにより課せられた制約下において目的を最も効果的に達成するアプローチを選択する。', FALSE), 
(28, 'テスト実装では、テスト実行に必要な環境、機器、データなどを用意し、テストなどを用意し、テスト実行を可能な状態にする。', TRUE),

(29, '早い段階で、欠陥を見つけることが重要。ソフトウェア開発ライフサイクルのなるべく早い段階でテストを行うことにより、コストを低減できる。', FALSE), 
(29, '膨大なパターンをすべてテストすることは不可能。優先度を決めて、順にテストを実施する。', FALSE), 
(29, 'あちこちに均等に存在するのではなく、特定の少数モジュールに集中する。', TRUE), 
(29, 'すべてのソフトウェアに共通するテストはない。さまざまな条件を考慮して、テストの方法を決める。', FALSE),

(30, 'トレーサビリティの確保は、ITガバナンスを確保していることの証明となり得る。', FALSE), 
(30, '成果物の追跡は、テストケース作成の段階で開始すべきである。', TRUE), 
(30, 'トレーサビリティを確保しておくことで、仕様書の変更などに対応しやすくなる。', FALSE), 
(30, 'トレーサビリティを確保できていることから得られる情報は、ステークホルダーやマネジメント層への説明にも用いられる。', FALSE),

(31, '思い込みや周囲の環境により、非合理的な判断をしてしまう。', FALSE), 
(31, '持っている信念に合わない情報を受け入れがたくする心理現象。', TRUE), 
(31, '他人の意見や指摘を優先して、自分の考えを常に疑う傾向のこと。', FALSE), 
(31, 'テスト結果やデータを無作為に解釈し、すべての仮説を同じ重みで受け入れる傾向のこと。', FALSE),

(32, 'コーディング後', FALSE), 
(32, 'テスト設計時', FALSE), 
(32, '要求仕様のレビュー時', TRUE), 
(32, '結合テスト実行時', FALSE),

(33, 'コンポーネントテスト', TRUE), 
(33, 'コンポーネント結合テスト', FALSE), 
(33, 'システムテスト', FALSE), 
(33, 'システム結合テスト', FALSE),

(34, 'ストレステスト', FALSE), 
(34, 'セキュリティテスト', FALSE), 
(34, 'システムテスト', TRUE), 
(34, 'ロード（負荷）テスト', FALSE),

(35, '要件定義', FALSE), 
(35, '基本設計', FALSE), 
(35, '単体テスト', FALSE), 
(35, '要求分析', TRUE),

(36, 'ユーザーが操作する画面の使いやすさを評価し、UIの改善点を抽出する作業のこと。', FALSE), 
(36, 'テスト実行中に発見された不具合の数を集計・分類する作業のこと。', FALSE), 
(36, 'テスト項目ごとの実行時間を分析し、効率的なテスト手順を決定する作業のこと。', FALSE), 
(36, 'システムの変更により既存システムがどの程度影響を受けるかチェックすること。', TRUE),

(37, '顧客やエンドユーザーによって実施されることがある。', FALSE), 
(37, '非機能要件も評価の対象となることがある。', FALSE), 
(37, 'システム開発者が単体で実施し、実装の正しさを確認する。', TRUE), 
(37, '運用環境に近い状況で実施されることが多い。', FALSE),

(38, 'ウォークスルー', FALSE), 
(38, 'テクニカルレビュー', FALSE), 
(38, 'スタティックテスト', TRUE), 
(38, 'インスペクション', FALSE),

(39, 'チェックリストベース', FALSE), 
(39, 'シナリオベース', FALSE), 
(39, 'パースペクティブベース', FALSE), 
(39, 'ベースラインレビュー', TRUE),

(40, 'ロールベース', TRUE), 
(40, 'アドホック', FALSE), 
(40, 'チェックリストベース', FALSE), 
(40, 'シナリオベース', FALSE),

(41, '欠陥を早期に検出して修正コストを下げる。', FALSE), 
(41, 'テストケースの網羅性を保証する。', TRUE), 
(41, '仕様や設計の妥当性を確認する。', FALSE), 
(41, 'チーム内の知識共有を促進する。', FALSE),

(42, 'チーム内で非公式なディスカッションを通じて実施される。', FALSE), 
(42, 'ファシリテーター、作成者、レビューア、書記などの明確な役割分担がある。', TRUE), 
(42, 'レビュー対象者のみがコメントを提出し、他者の参加はない。', FALSE), 
(42, '自動ツールを用いてコードのパターンや規則違反を検出する。', FALSE),

(43, '7文字、8文字、20文字、21文字', TRUE), 
(43, '6文字、9文字、19文字、22文字', FALSE), 
(43, '8文字、10文字、15文字、20文字', FALSE), 
(43, '7文字、10文字、20文字、30文字', FALSE),

(44, 'エラー推測', FALSE), 
(44, '状態遷移テスト', FALSE), 
(44, '同値分割＋境界値分析', TRUE), 
(44, '探索的テスト', FALSE),

(45, '仕様が詳細に書かれており、すべての入力条件が明確である場合。', FALSE), 
(45, '入力値の範囲が厳密に定義されており、分類もしやすい場合。', FALSE), 
(45, '以前に類似のバグが多発していた領域を再テストする場合。', TRUE), 
(45, '複雑な状態遷移があるため、遷移網羅が重要な場合。', FALSE),

(46, 'ステートメントカバレッジではループの回数を制御できないため。', FALSE), 
(46, 'ステートメントカバレッジはすべての変数を検査しないため。', FALSE), 
(46, 'すべての条件分岐の真偽パターンを網羅するわけではないため。', TRUE), 
(46, 'ステートメントカバレッジではブラックボックス技法が使えないため。', FALSE),

(47, '同値分割は入力値の境界を重視するが、境界値分析は入力の分類を行う。', FALSE), 
(47, '同値分割は仕様ベースだが、境界値分析は構造ベースの技法である。', FALSE), 
(47, '境界値分析は同値クラスの代表値だけを使用するが、同値分割では境界に着目する。', TRUE), 
(47, '同値分割ではクラス内の任意の値を代表として選ぶが、境界値分析では極値を選ぶ。', FALSE),

(48, '開発者が自分のコードをよく理解しているため、バグの見逃しが減る。', FALSE), 
(48, '開発者とは異なる視点でテストが実施されるため、客観的な評価やバイアスの排除が期待できる。', TRUE), 
(48, '開発チームとテストチームが同じ視点で確認できるため、効率的な開発が可能になる。', FALSE), 
(48, 'テスト実行のコストが下がるため、全体の開発費用を削減できる。', FALSE),

(49, '開発チームとテストチーム間の連携不足により、対立やコミュニケーションの課題が生じる可能性がある。', TRUE), 
(49, '開発とは異なる視点でテストを行うことで、客観性が高まり品質向上が期待できる。', FALSE), 
(49, '独立したテストでは、ユーザーの視点が取り入れにくくなるため、使いやすさの評価が難しくなる。', FALSE), 
(49, '第三者がテストを行うことで、仕様や設計に対する先入観を排除できる。', FALSE),

(50, 'テストの実行は開発者の判断に任せ、状況に応じて自由にテスト設計を行うスタイル。', FALSE), 
(50, '外部のルールや業界固有の標準を使用してテストを進めるアプローチ。', TRUE), 
(50, 'ユーザーの行動を観察して、使いやすさに重点を置いたテストを行うアプローチ。', FALSE), 
(50, 'ランダムに操作を行い、予期しないバグを発見することを目的としたテスト手法。', FALSE),

(51, 'テスト計画レポート', FALSE), 
(51, 'テスト進捗レポート', TRUE), 
(51, 'テスト設計レポート', FALSE), 
(51, 'テスト実行レポート', FALSE),

(52, 'プロダクトリスクはスケジュールの遅延や予算超過に関するリスクであり、プロジェクトリスクは製品に存在する欠陥のリスクを指す。', FALSE), 
(52, 'プロダクトリスクもプロジェクトリスクも、どちらも開発チームの人間関係に関するリスクを指す。', FALSE), 
(52, 'プロジェクトリスクは製品の品質に直接関係するリスクであり、プロダクトリスクはプロジェクト計画の失敗に関するリスクである。', FALSE), 
(52, 'プロダクトリスクは製品やシステムが要件を満たさないリスクであり、プロジェクトリスクは開発やテストの進行に関わるリスクを指す。', TRUE),

(53, 'テスト設計および実装ツール', FALSE), 
(53, 'マネジメントツール', TRUE), 
(53, '非機能テストツール', FALSE), 
(53, 'コラボレーションツール', FALSE),

(54, 'ソフトウェアに監視コード（プローブ）を組み込むことで、システムの動作に影響が出る現象。', TRUE), 
(54, 'テストツールを使うことで、ソフトウェアのバグが自動的に修正される現象。', FALSE), 
(54, '複数人で同時にテストを実施することで、テスト効率が向上する現象。', FALSE), 
(54, 'テストケースの順序を変えることで、結果が変わってしまう現象。', FALSE),

(55, '反復する手動作業の削除と時間の節約ができる。', TRUE), 
(55, '少ない導入コストで大きな効果が期待できる。', FALSE), 
(55, 'テスト実行ツールのバージョンを適宜アップデートすることで、最新のプラットフォームに対応できる。', FALSE), 
(55, 'オープンソースプロジェクトは無償で継続的に活用ができる。', FALSE),

(56, 'ツールが全てのバグを見つけることができるかどうか。', FALSE), 
(56, '自動化されたテストが手動テストよりも必ず速く実行できるかどうか。', FALSE), 
(56, 'テスト自動化の適用範囲と、テストのカバレッジの向上を定期的に確認する。', TRUE), 
(56, 'ツールの使用後、特に改善が見られなくてもツールを続けること。', FALSE),

(57, 'パイロットプロジェクトでは、テストツールの費用対効果が自動的に算出されるため。', FALSE), 
(57, 'どのようなプロジェクトでも、最初から本格導入する方が効率的であることを確認するため。', FALSE), 
(57, 'テストツールの有効性や適合性を小規模な範囲で評価し、リスクを最小限に抑えるため。', TRUE), 
(57, 'パイロットプロジェクトでは、テストの自動化が不要であることを証明するため。', FALSE),

(58, 'レコード＆プレイバックアプローチ', FALSE), 
(58, '手動テストアプローチ', FALSE), 
(58, 'キーワード駆動テストアプローチ', TRUE), 
(58, 'スクリプト乱用アプローチ', FALSE),

(59, 'ツール導入の前に、導入目的・対象業務・運用体制を明確にし、関係者との合意を取ること。', TRUE), 
(59, 'ツールの仕様書通りに導入すれば、現場のプロセスに関係なく成果が出ると判断すること。', FALSE), 
(59, 'ツールの選定において、コストよりもUIデザインを最優先にすること。', FALSE), 
(59, 'ツールのベンダー任せで、導入後のトレーニングやサポートは最小限にすること。', FALSE),

(60, 'ツールが提供する機能と価格のバランス。', TRUE), 
(60, 'ツールが他のプロジェクトで既に使用されているかどうか。', FALSE), 
(60, 'ツールが最も人気のあるものであること。', FALSE), 
(60, 'ツールが使用されている国の数。', FALSE);
