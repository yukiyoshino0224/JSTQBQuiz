--テーブル削除
DROP TABLE IF EXISTS choices, questions, answers CASCADE;

-------------

CREATE TABLE questions (
    id SERIAL PRIMARY KEY,
    chapter INT NOT NULL,
	chapter_title TEXT NOT NULL,
    question TEXT NOT NULL
);

CREATE TABLE choices (
    id SERIAL PRIMARY KEY,
    question_id INT NOT NULL,
    choice_text VARCHAR(255) NOT NULL,
    is_correct BOOLEAN NOT NULL,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE,
    explanation TEXT
);

CREATE TABLE answers(
    id SERIAL PRIMARY KEY,
    question_id INT NOT NULL,
    selected_choice_id INT NOT NULL,
    is_correct BOOLEAN NOT NULL,
    FOREIGN KEY (question_id) REFERENCES questions(id),
    FOREIGN KEY (selected_choice_id) REFERENCES choices(id)
);

-------------

INSERT INTO questions (chapter, chapter_title, question) 
VALUES 
(1, 'テストの基礎', 'すべてのプロジェクトに共通するテストの目的として、適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(1, 'テストの基礎', 'テストとデバッグの違いとして最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(1, 'テストの基礎', 'テストにより欠陥を発見し、リリース前にそれを取り除くことで、運用に入ってから故障が起きたり、ステークホルダーのニーズに合致しなかったりするリスクを低減できる。それを効果的に行うには、テスト担当者がソフトウェア開発ライフサイクルの各フェーズに関与することが大切である。各フェーズに対する関与の仕方として、適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(1, 'テストの基礎', '品質保証(QA)と品質コントロール(QC)、テスト、および品質マネジメント(QMS)の関係で最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(1, 'テストの基礎', 'エラーと欠陥と故障の関係で適切でないものはどれか。次の選択肢の中から1つ選びなさい。')

,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'ソフトウェア開発ライフサイクルモデルとテストの関係として、最も適切なものはどれか。次の選択肢から1つ選びなさい。')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'どのようなソフトウェア開発ライフサイクルにも共通する、よいテストの実践として、最も適切なものはどれか。次の選択肢から1つ選びなさい。')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のテスト駆動開発の説明における①に当てはまる用語として、最も適切なものはどれか。次の選択肢から1つ選びなさい。テスト駆動開発では、テストを最初に書き、次にテストを満たすようにコードを書き、そしてテストとコードを（①）する。')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'テストをする観点から見たDevOpsの利点として、最も適切なものはどれか。次の選択肢から1つ選びなさい。')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'シフトレフトアプローチの説明として、最も適切なものはどれか。次の選択肢から1つ選びなさい。')

,(3, '静的テスト', '静的テストには、レビューと静的解析があり、ほとんどの作業成果物がテスト対象となる。静的テストの説明として適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(3, '静的テスト', '次の中で静的テストの利点として適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(3, '静的テスト', '静的テストと動的テストの違いを説明する文章として、適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(3, '静的テスト', 'レビュープロセスを説明する文章として適切でないものものはどれか。次の選択肢の中から1つ選びなさい。')
,(3, '静的テスト', 'レビューにおける参加者の役割と責務を説明する文章として、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')

,(4, 'テスト分析と設計', 'テスト技法の分類を説明する文章の中で最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(4, 'テスト分析と設計', '状態遷移テストはブラックボックステスト技法の1つである。状態遷移テストを説明する文章の中で適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(4, 'テスト分析と設計', '状態遷移図および状態遷移表に基づく状態遷移テストを説明する文書の中で適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(4, 'テスト分析と設計', 'ステートメントテストとブランチテストは、代表的なホワイトボックステスト技法である。この2つのテスト技法を説明する文章の中で、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(4, 'テスト分析と設計', 'エラー推測と探索的テストは、代表的な経験ベースのテスト技法である。この2つのテスト技法を説明する文章の中で最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')

,(5, 'テスト活動のマネジメント', 'イテレーティブ開発モデルにおける計画プロセスを説明する文章の中で、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(5, 'テスト活動のマネジメント', 'テスト工数の見積もり技法を説明する文章の中で、外挿を説明しているものはどれか。次の選択肢の中から1つ選びなさい。')
,(5, 'テスト活動のマネジメント', 'テスト計画書はテスト活動を概説するものである。テスト計画書に記載すべき内容として適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(5, 'テスト活動のマネジメント', 'テストをいつ開始するか、いつ終了するかを判断するために、テストの開始基準と終了基準を定義することは重要である。この2つを説明する文章の中で適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(5, 'テスト活動のマネジメント', 'テスト工数を見積もる上で適切でないものはどれか。次の選択肢の中から1つ選びなさい。')

,(6, 'テストツール', 'テスト活動を支援するテストツールには様々な種類がある。テストツールの分類の説明として、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(6, 'テストツール', 'テスト自動化ツールには利点もあるがリスクもある。テスト自動化ツールの利点とリスクの説明として、適切でないものはどれか。次の選択肢の中から1つ選びなさい。')

,(1, 'テストの基礎', 'テスト実行前の作業に関する記述のうち、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(1, 'テストの基礎', 'テストの7原則の1つ「欠陥の偏在」の説明として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(1, 'テストの基礎', 'SDLCの成果物に対するトレーサビリティについて説明したものとして、適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(1, 'テストの基礎', '開発担当者の心理に影響を与える「確証バイアス」の説明として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(1, 'テストの基礎', 'ソフトウェア開発プロセスにおいて、テスト活動が最も効果的にバグを予防できるタイミングはいつか。次の選択肢の中から1つ選びなさい。')

,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のテストは、どのテストレベルに関する記述か。最も適切なものを次の選択肢から1つ選びなさい。分離可能なソフトウェアに対して、モックオブジェクト、シミュレーター等を用いてシステムのその他部分と切り離してテストを行う。')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のうち、非機能テストとして適切でないものはどれか。次の選択肢から1つ選びなさい。')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'V字モデルにおいて、「受け入れテスト」はどの段階と対応するか。次の選択肢から1つ選びなさい。')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のうち、「影響度分析」の説明として最も適切なものはどれか。次の選択肢から1つ選びなさい。')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のうち、「受け入れテスト」の特徴として適切でないものはどれか。次の選択肢から1つ選びなさい。')

,(3, '静的テスト', '次のうち、レビュータイプとして適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(3, '静的テスト', '次のうち、レビュー技法として適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(3, '静的テスト', 'レビューアがステークホルダーになりきってレビューする方法は「パースペクティブベース」と他にどれか。次の選択肢の中から1つ選びなさい。')
,(3, '静的テスト', 'レビューの目的として適切でないものはどれか。次の選択肢の中から1つ選びなさい。')
,(3, '静的テスト', '「インスペクション」に最も適切な特徴はどれか。次の選択肢の中から1つ選びなさい。')

,(4, 'テスト分析と設計', 'あるアプリで「パスワードの長さは8文字以上、20文字以下」と仕様で定められている。境界値分析における代表的なテストケースの組み合わせとして最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(4, 'テスト分析と設計', 'あるシステムでは、入力値が複雑で正しい入力のルールも明確である。この場合、最も適切なブラックボックステスト技法はどれか。次の選択肢の中から1つ選びなさい。')
,(4, 'テスト分析と設計', 'エラー推測を適用するのに最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(4, 'テスト分析と設計', 'コードに対して「ステートメントカバレッジ」100%を達成しても、必ずしも発見できない欠陥がある理由として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(4, 'テスト分析と設計', '同値分割と境界値分析の違いを最も正しく表しているものはどれか。次の選択肢の中から1つ選びなさい。')

,(5, 'テスト活動のマネジメント', '独立したテストの利点として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(5, 'テスト活動のマネジメント', '独立したテストの欠点として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(5, 'テスト活動のマネジメント', 'テスト戦略の「プロセス準拠」の説明として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(5, 'テスト活動のマネジメント', 'テストレポートとして最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(5, 'テスト活動のマネジメント', 'プロダクトリスクとプロジェクトリスクの違いについて最も適切ものはどれか。次の選択肢の中から1つ選びなさい。')

,(6, 'テストツール', '要件や、テストで発見した欠陥などを管理することを目的としたツールとして、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(6, 'テストツール', 'プローブ効果とは何か。最も適切なものを次の選択肢の中から1つ選びなさい。')
,(6, 'テストツール', 'テスト自動化の利点の説明として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(6, 'テストツール', 'テストツールを導入した後、その効果を測定する方法として最も適切なものはどれか。選択肢の中から1つ選びなさい。')
,(6, 'テストツール', 'テストツールを選定した後、まず小規模なパイロットプロジェクトで試行的に導入する理由として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(6, 'テストツール', 'テスト実行ツールで大きな効果を得るためのアプローチとして、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(6, 'テストツール', 'テストツール導入の成功要因として最も適切なものはどれか。次の選択肢の中から1つ選びなさい。')
,(6, 'テストツール', 'テストツールを選定する際に、最も重視すべき基準はどれか。次の選択肢の中から1つ選びなさい。');


INSERT INTO choices (question_id, choice_text, is_correct, explanation) 
VALUES 
(1, '要件、ユーザーストーリー、設計、およびコードなどの作業成果物を評価することによって欠陥を防ぐ。', FALSE, '要件や設計段階で欠陥を予防するための活動は静的テストとして重要であるため、テストの目的として適切である。'), 
(1, 'コード変更からリリースまでの処理を自動化して作業効率を高める。', TRUE, '自動化による効率化はテストプロセス全体の改善には有効だが、テストそのものの目的ではないため、テストの目的として不適切である。'), 
(1, 'テスト対象が完成したことを確認し、ユーザーやその他ステークホルダーの期待どおりの動作内容であることの妥当性を確認する。', FALSE, 'ソフトウェアが要求どおりに動作するかを確認する妥当性の確認は、テストの基本的な目的であるため、テストの目的として適切である。'), 
(1, '欠陥や故障を発見し、ソフトウェアの品質が不適切になるリスクレベルを軽減する。', FALSE, '不具合の検出とリスク軽減はテストの中心的な目的であるため、テストの目的として適切である。'),

(2, 'テストはソフトウェアに存在する欠陥を見つけることで、デバッグはそれに加えて、解析して取り除くまでの一連の作業が含まれる。', TRUE, 'テストは欠陥を見つけることが主な目的であり、デバッグはその欠陥を解析し、修正する作業まで含むため、テストとデバッグの違いとして最も適切である。'), 
(2, 'テストはコンポーネント内の欠陥を見つけることで、デバッグはコンポーネント間の連携部分の欠陥を見つけること。', FALSE, 'テストはコンポーネント内・間を問わず欠陥を見つけることが目的であり、デバッグはその欠陥を修正する作業であるため、テストとデバッグの違いとして不適切である。'), 
(2, 'テストはソフトウェアを動作させて故障を見つけ、その原因を探って欠陥を見つけることで、デバッグはソフトウェアを動作させないで直接欠陥を見つけること。', FALSE, 'テストとデバッグはどちらもソフトウェアを動作させることで欠陥を見つけるため、この選択肢はテストとデバッグの違いとして不適切である。'), 
(2, 'テストはコードを修正した際に正しく修正されたことを確認することで、デバッグはその修正により既存箇所に予期せぬ影響が発生していないかを確認すること。', FALSE, 'それぞれメンテナンステストにおける確認テストとリグレッションテストの違いの説明であるため、テストとデバックの説明として不適切である。'),

(3, 'テスト担当者が要件レビューやユーザーストーリーの洗練作業に関与することにより、開発担当者と異なる視点でこれらの作業成果物の欠陥を検出できる。', FALSE, 'テスト担当者が要件やユーザーストーリーに関与することで、開発者とは異なる視点から早期に欠陥を発見できるため、テストの目的として適切である。'), 
(3, 'システム設計時にテスト担当者が設計担当者と密接に連携して作業することにより、両者が設計とその設計をどうテストするかに対する理解を深めることができる。', FALSE, '設計段階でテスト担当者が関与することで、テスト戦略の精度が高まり、品質向上につながるため、テストの目的として適切である。'), 
(3, 'コード開発時にテスト担当者が開発担当者と密接に連携することにより、テストで見つかった欠陥をテスト担当者自らが効率よく取り除くことができる。', TRUE, 'テスト担当者の役割は欠陥を発見することであり、修正は開発者の役割であるため、テスト担当者が修正を行うのは誤った理解であり、テストの目的として不適切である。'), 
(3, 'テスト担当者が要件定義のレビューに参加すると、テスト担当者の知見を活かした提案ができ、要件定義作業に貢献できる。', FALSE, '要件定義段階にテスト担当者が関与することで、明確でテストしやすい要件策定に寄与できるため、テストの目的として適切である。'),

(4, '品質マネジメントは、品質が適切なレベルに到達していることを示すために、テストを含む必要なプロセス全体を実行する必要がある。', FALSE, '品質マネジメント（QMS）は、品質に関する目標を定め、その達成に向けた方針やプロセスを策定・管理する活動であり、「プロセス全体を実行する」というのは運用的な誤解を含むため、品質マネジメントの定義として不適切である。'), 
(4, '品質コントロールは、品質が適切なレベルに到達するようにテストを含む適切な作業を行うことである。', TRUE, '品質コントロール（QC）は、製品やサービスが規定された品質基準を満たすように監視・測定・修正を行う活動であり、テストもその一環として含まれるため、品質コントロールの定義として適切である。'), 
(4, 'テストは、品質保証と品質コントロールの両方を含む上位概念で品質に関して組織の方針を示し、組織をコントロールするための活動をすべて含む。', FALSE, 'テストは、品質保証（QA）や品質コントロール（QC）の一部として実施される活動であり、それらの上位概念ではないため、テストの位置づけとして不適切である。'), 
(4, '品質保証は、ソフトウェアの品質を評価し、運用環境でソフトウェアの故障が発生するリスクを低減する1つの手段である。', FALSE, '品質保証（QA）は、開発プロセス全体において品質を「作り込む」ための予防的活動であり、「品質を評価する」という表現は品質コントロールの性質に近いため、品質保証の定義として不適切である。'),

(5, '人間はエラー(誤り)を起こす。そのエラーが作業成果物の欠陥(フォールトまたはバグ)となる。', FALSE, '人間はエラーを起こすことがあり、そのエラーが作業成果物に欠陥（バグやフォールト）を生むのは正しい理解。テストは欠陥を見つける活動であり、これがエラーと欠陥の関係を示すため、テストの目的として適切である。'), 
(5, '欠陥のあるコードが実行されると、故障が発生することがある。そのため故障ができるだけ発生しないように欠陥を見つけるのがテストの役割である。', FALSE, '欠陥のあるコードが実行されることで故障（システムの不具合）が発生することがあるのは正しい理解です。テストの役割は欠陥を発見し、故障を防ぐことですので、テストの目的として適切である。'), 
(5, '故障が起きたからといって、必ずコードの中に欠陥があるとは限らない。環境条件やハードウェアの構成変更などにより故障が起きる場合もある。', FALSE, '故障が発生する原因として、コードの欠陥だけではなく、環境条件やハードウェア構成の変化も影響を与えることがあるというのは非常に適切な視点。このような理解は、テストの対象範囲を広げるために重要なため、テストの目的として適切である。'), 
(5, 'テストにより欠陥でないものを欠陥とすることを偽陰性(誤検出)といい、検出すべき欠陥を検出しないことを偽陽性(検出漏れ)という。', TRUE, 'ここでは「偽陰性」と「偽陽性」の定義が逆になっている。実際には、偽陽性は「欠陥がないのに欠陥があると誤検出すること」であり、偽陰性は「欠陥があるのに欠陥が検出されないこと」。この選択肢は定義が誤っているため、テストの目的として不適切である。'),

(6, 'シーケンシャル開発モデルでは、SDLCの初期段階において、要件レビュー、テスト分析、およびテスト設計に参加し、動的テストの実行まで行う。', FALSE, '動的テストの実行は、シーケンシャル開発モデル（例：ウォーターフォールモデル）では後工程で行われるものであり、初期段階で実行するものではない。「動的テストの実行まで行う」という表現は不正確であるため、不適切である。'), 
(6, 'イテレーティブ開発モデルでは、各イテレーションで静的テストと動的テストのどちらかを実行し、リリースまでに両方が行われるようにする。', FALSE, '各イテレーションにおいては、静的テストと動的テストの両方を必要に応じて実施することが望ましい。「どちらかを実行する」という記述は、イテレーティブ開発の考え方と合致しないため、不適切である。'), 
(6, 'インクリメンタル開発モデルでは、インクリメントを頻繁に提供するために、迅速なフィードバックと広範なリグレッションテストが必要となる。', TRUE, 'インクリメンタル開発モデルでは、機能を段階的に追加していくため、既存機能に影響がないかを確認するリグレッションテストと迅速なフィードバックが重要となる。この記述はその特徴を正しく捉えており、適切である。'), 
(6, 'アジャイルソフトウェア開発ではテスト自動化を充実させるとともに、手動テストはホワイトボックステスト技法を使用して行われる傾向がある。', FALSE, 'アジャイル開発ではテスト自動化が重要視されるのは正しいが、手動テストで必ずホワイトボックステスト技法を使用するというわけではない。ブラックボックステストや探索的テストなども使われるため、この記述は偏っており、不適切である。'),

(7, 'すべてのテストレベルの目的は共通である。', FALSE, 'テストレベル（単体テスト、結合テスト、システムテストなど）には、それぞれ異なる目的があるため、「目的は共通である」という記述は不適切である。'), 
(7, '各テストレベルのテスト分析や設計は、対応するSDLCの開発フェーズが始まる前に開始する。', FALSE, 'テスト分析や設計は、通常それに対応する開発フェーズの成果物が準備された後に行うため、「フェーズが始まる前に開始する」という記述は不適切である。'), 
(7, '開発活動の作業成果物のドラフトができたらすぐにテスト担当者がレビューに関与する。', TRUE, '欠陥の早期発見や手戻りの防止につながる「早期関与（Early Involvement）」の考え方に基づいており、適切である。'), 
(7, '各開発活動に対応したテスト活動を品質コントロールの対象とし、開発活動は品質コントロールの対象外とする。', FALSE, '品質コントロールでは、開発活動を含めたプロセス全体を対象とするべきであるため、「開発活動は対象外とする」という記述は不適切である。'),

(8, 'リグレッション', FALSE, '「リグレッション（回帰）」は、変更によって既存の機能に不具合が再発することを指すため、文脈に合わず不適切である。'), 
(8, 'リファクタリング', TRUE, 'リファクタリングは、動作を変えずにコードの内部構造を改善する作業であり、テストとコードを改善するという文脈に最も合致しており適切である。'), 
(8, '継続的インテグレーション', FALSE, '継続的インテグレーション（CI）は、コード変更を頻繁に統合し自動テストを行う手法だが、「テストとコードを〇〇する」という文脈には合わず不適切である。'), 
(8, 'フィードバック', FALSE, 'フィードバックは、作業結果に対しての評価や意見を得ることであり、この文の「テストとコードを〇〇する」というフローには合致せず不適切である。'),

(9, 'コード品質を迅速にフィードバックする。', TRUE, 'DevOpsのプロセスでは、開発者がコードを変更した際に自動的にテストが実行され、その結果が迅速にフィードバックされる。この早期のフィードバックにより、コードの品質を高い状態で維持することが可能であり、迅速に問題を発見して修正できるため、適切である。'), 
(9, 'ユーザーの視点からのテストを自動化する。', FALSE, 'DevOpsはコードの品質向上と迅速なデリバリーに焦点を当てているが、ユーザー視点でのテスト自動化はその主な目的とは言えない。ユーザー体験を測るテストは手動で行うべき部分も多いため、この記述は不適切である。'), 
(9, '非機能品質特性に対する観点を減らす。', FALSE, 'DevOpsでも非機能品質（例えば性能、セキュリティなど）のテストは非常に重要であり、その観点を減らすことは適切ではない。非機能テストもDevOpsの一部として適切に行われるべきであるため、この記述は不適切である。'), 
(9, 'テスト自動化の確立と保守を容易にする。', FALSE, 'DevOpsの目的にはテストの自動化が含まれるが、「保守が容易にする」という部分は特に強調されるべきではない。自動化の確立や保守は重要だが、それがDevOpsの最も重要な利点ではないため、この記述は不適切である。'),

(10, 'テスト仕様書のレビューに開発担当者が関与する。', FALSE, 'シフトレフトアプローチの主な目的は、テストを開発の早い段階に持ち込むことだが、テスト仕様書のレビューへの開発担当者の関与は直接的にシフトレフトの概念とは関係がない。テスト仕様書のレビューは重要だが、シフトレフトとは少し異なる観点になる。この選択肢は不適切である。'), 
(10, '動的テストの前にソースコードの静的解析を完了する。', TRUE, 'シフトレフトアプローチでは、テストを早期に実施して問題を早期に発見することが目的。動的テストを行う前にソースコードを静的に解析することで、潜在的な問題を早期に発見し、開発の初期段階で改善することができる。これはシフトレフトの考え方に完全に一致する。したがって、この選択肢は適切である。'), 
(10, 'コンポーネントテストレベルでブラックボックステスト技法を用いる。', FALSE, 'シフトレフトアプローチでは、テストを開発の早い段階で行うが、コンポーネントテストでブラックボックステストを使用すること自体がシフトレフトの特徴とは言えない。ブラックボックステストは外部からの振る舞いを確認するテスト手法であり、シフトレフトの早期テストを促進するという観点では、静的解析などの前処理がより重要。この選択肢は不適切である。'), 
(10, 'リグレッションテストをコンポーネントテストレベルから開始する。', FALSE, 'リグレッションテストは、主にシステム全体の動作が以前のバージョンから変更されていないことを確認するために行われるが、コンポーネントテストレベルから開始するというのは通常のアプローチではない。リグレッションテストは、むしろ全体のシステムが安定していることを確認する段階で行われるべき。この選択肢は不適切である。'),

(11, 'レビューの対象には、仕様書はユーザーストーリー、ユーザーガイドなどの作業成果物だけでなく、コードも含まれる。', FALSE, '静的テストの一つである「レビュー」は、文書（仕様書、設計書など）だけでなく、ソースコードも対象となるため、適切である。'), 
(11, '静的解析ツールを使うと、コードやモデルなどの構造的な作業成果物に対して効率的にテストができる。一方、レビューを行えば、自然言語で記述された作業成果物に対して、誤字脱字、文法、読みやすさを評価することができる。', FALSE, '静的解析ツールは、コードの構文・スタイル・潜在的なバグなどを自動で検出できる。また、レビューは文書の内容・表現などを人がチェックする活動であるため、適切である。'), 
(11, 'テスト計画書やテストケースなどのテストウェアはシステム開発の作業成果物ではなく、テストのための成果物である。そのため、これらは静的テストの対象に含まれない。', TRUE, 'テスト計画書・テストケースといったテストウェアも作業成果物である。内容に不備があればテストの効果が落ちるため、レビューなどの静的テスト対象となるため、不適切である。'), 
(11, '静的解析は、航空や医療などのセーフティクリティカルシステムだけでなく、他の分野のシステムでも重要かつ一般的になってきている。', FALSE, '安全性が求められる分野では特に厳格に静的解析が使われるが、品質向上のため一般の業務システムやWebアプリケーションでも広く用いられるようになっているため、適切である。'),

(12, '動的テスト実行する前に欠陥を早期に検出できる。', FALSE, '静的テストはコードや設計書などを実行せずに確認するテスト手法であり、動的テストの前段階で欠陥を検出できる。これにより手戻りが減り、開発コストの削減にもつながるため、適切である。'), 
(12, '動的テストでは容易に検出できない欠陥を識別できる。', FALSE, '静的テストは仕様書の矛盾や設計上のミス、コードの構造的な問題など、動的テストでは見つけにくい欠陥を検出できる。特に自然言語で書かれた成果物のレビューなどが有効であるため、適切である。'), 
(12, 'テストプロシージャ―とテスト実行の突き合せによりテストカバレッジを計測できる。', TRUE, 'テストカバレッジの計測は、テストを実行して得られる動的な情報をもとに行うものである。静的テストはプログラムを実行しないため、テスト実行との突き合せによるカバレッジ計測はできないため、不適切である。'), 
(12, '設計の改善や保守性の高いコードに貢献することで、開発やメンテナンスの生産性を向上できる。', FALSE, '静的テストにより、設計上の無駄や非効率なコード構造に気づくことができ、結果として可読性・保守性が向上する。それにより、開発全体の生産性も高まるため、適切である。'),

(13, '動的テストは保守性の欠陥を検出するのに向いており、静的テストは機能的欠陥を検出するのに向いている。', TRUE, '動的テストと静的テストの説明が逆転しているため、不適切である。'), 
(13, '動的テストはソフトウェアを実行して発生した故障をもとに欠陥を見つけるが、静的テストは作業成果物の欠陥を直接検出できる。', FALSE, '動的テストは、テストケースを実行し、その結果から故障（エラー）を見つけて、そこから欠陥（バグ）の原因を突き止める。一方、静的テストは実行せずに、コードや設計書などを直接チェックし、問題点を発見する手法であるため、適切である。'), 
(13, '動的テストは外部から見える振る舞いに焦点を置くことが多いが、静的テストは作業成果物の整合性と内部品質を向上させる特徴を持つ。', FALSE, '動的テストは主に「出力が正しいか」「正しく動作するか」といった振る舞いに注目する。これはブラックボックステストの観点とも一致する。静的テストは、コードの構造や設計書の一貫性などをチェックし、内面的な品質を高める効果があるため、適切である。'), 
(13, '静的テストと動的テストは、それぞれ異なる種類の欠陥を検出できるため、相互に補完する関係にある。', FALSE, '静的テストと動的テストは、それぞれ異なる強みを持つ。たとえば、静的テストは仕様書の曖昧さや設計の不備を検出しやすく、動的テストは動作の正当性を確認できる。そのため、両方を組み合わせて使うことで、より多くの欠陥をカバーできるため、適切である。'),

(14, '計画プロセスの主な作業は、レビューの目的、レビュー対象のドキュメント、評価すべき品質特性を定義することである。', FALSE, 'レビューの計画段階では、何を目的としてレビューを行うのか、どのドキュメントを対象とするのか、そしてどの品質特性（例：正確性、完全性、保守性など）を重視するのかを定める必要がある。これはレビュープロセスの基本であり、正しい記述であるため、適切である。'), 
(14, '修正と報告プロセスの主な作業は、作業成果物をレビューして、不正な点、提案、質問を書き出すことである。', TRUE, 'この記述は実際には「個別レビュー」または「レビュー実施」に該当する内容である。「修正と報告」プロセスは、すでに識別された指摘事項について必要な修正を行い、その結果や対応状況を報告・記録することが主な作業となる。したがって、この選択肢はプロセスの説明が誤っているため、不適切である。'), 
(14, '共有と分析プロセスの主な作業は、識別した不正を分析し、それらにオーナーとステータスと必要なアクションを割り当て、品質特性を評価して文書化し、これらの情報をもとにレビュー判定することである。', FALSE, 'このプロセスでは、レビューで見つかった指摘を精査し、誰が対応すべきか（オーナー）やその状態（例：未対応、対応済み）を決め、必要なアクション（修正、再確認など）を明確にする。最終的にレビューの合否や次のステップへ進むかどうかを判断する材料とする。正確な説明であるため、適切である。'), 
(14, 'レビューの立ち上げプロセスは、個々のレビューに入る前に参加者同士で情報を共有する作業である。具体的には、作業成果物を参加者に共有した上でレビューの範囲を説明し、参加者からの質問に答えて意思疎通を図るなどである。', FALSE, '立ち上げプロセス（Kick-off）は、レビューの前に参加者全体で認識を合わせる場であり、作業成果物の背景や目的、範囲、役割分担などを説明するプロセスである。この説明は内容として正しいため、適切である。'),

(15, 'マネージャーは、作業成果物のレビューを行って不正を識別する。', FALSE, 'マネージャーの主な役割は、レビュー活動全体の支援や資源の確保、レビューの重要性を認識させることなどである。不正の識別はレビューアの役割であり、マネージャーが直接レビューして欠陥を見つける立場ではないため、不適切である。'), 
(15, 'レビューアとは、レビュー対象の作業成果物を作成した人のことである。レビューで指摘されて不正を識別したら、自分の作った作業成果物を修正する。', FALSE, 'レビューアとは、成果物を確認し、不正や問題点を指摘する役割である。一方、成果物を作成し、指摘に基づいて修正を行うのはオーサー（作者）であるため、不適切である。'), 
(15, 'モデレーターは、効果的なレビューミーティングを運営する人である。参加者の様々な意見の調整を行い、レビューを成功に導く役割を担う。', TRUE, 'モデレーターの役割は、レビューのファシリテーション（円滑な進行）であり、参加者間の意見調整や議論の管理などが含まれるため、適切である。'), 
(15, 'レビューリーダーは、レビューの計画を行う人である。レビューの計画を立て、実行を決定する。また、不適切な結果が発生した場合は、適切にコントロールする役割を担う。', FALSE, 'Dはレビューマネージャーの役割である。レビューリーダーはレビューを取り仕切り、参加者を選定しレビュー期間と開催場所を決定するため、不適切である。'),

(16, 'ホワイトボックステスト技法は、テストベースを分析して適切なテスト条件を作成し、テスト対象のソフトウェアの振る舞いに焦点を当てたテストである。', FALSE, 'ソフトウェアの振る舞いに焦点を当てるのはブラックボックステスト技法の特徴であり、ホワイトボックステスト技法は内部構造やコードの流れに注目してテストを行うため、不適切である。'), 
(16, 'ブラックボックステスト技法は、テスト対象の内部構造と処理に重点を置いたテストで、構造ベースの技法ともよばれている。', FALSE, 'ブラックボックステストは、外部からの入力と出力の関係に注目するテストであり、内部構造には依存しないため、不適切である。'), 
(16, '経験ベースのテスト技法は、テスト担当者のスキルと直感、および経験を基にテストする方法である。技法という名前はついているが、担当者に任せる方法なので、特定のやり方、技法があるわけではない。', FALSE, '経験ベースのテストにもエラーベス分析や探索的テストなどの具体的な技法が存在するため、何も技法がないとする説明は不適切である。'), 
(16, 'ブラックボックステスト技法は機能テストと非機能テストの両方に適用できる。', TRUE, 'ブラックボックステスト技法は、外部仕様に基づいて動作を検証するため、機能テストと非機能テストの両方に適用でき、適切である。'),

(17, '状態遷移テストは、画面の遷移に焦点を当てたテストで、ある画面から別の画面に正しく画面が切り替わることを確認するものである。', TRUE, '状態遷移テストは画面の切り替わりそのものではなく、システムやコンポーネントがある「状態」から別の状態へ正しく変化するか（条件付きの内部状態変化）に焦点を当てるテストである。単なる画面遷移テストと混同しているため、不適切である。'), 
(17, '状態遷移テストは、コンポーネントやシステムの状態がイベントによってどのように変化するかに焦点を当てたテストで、組み込みソフトウェア業界で幅広く使われている。', FALSE, '状態遷移テストの目的や適用範囲を正しく表しており、適切である。'), 
(17, '状態遷移テストで使用する状態遷移表には、状態間の有効な遷移と無効だと思われる遷移の両方を記載する。', FALSE, '正常な遷移（有効遷移）だけでなく、誤った操作やあり得ない入力による無効遷移も考慮しテスト設計するのが状態遷移テストの特徴であり、適切である。'), 
(17, '状態遷移の有効遷移カバレッジは、テスト対象の状態が有効に遷移する数の合計数のうち、テストでカバーした遷移の数の割合で計測する。', FALSE, '状態遷移カバレッジの定義として正しく、適切である。'),

(18, '有効遷移カバレッジ100%は全遷移カバレッジ100%を保証しないが、全状態カバレッジ100%は、有効遷移カバレッジ100％を保証する。', TRUE, '有効遷移カバレッジと全遷移カバレッジは別物であり、全状態カバレッジ100%が有効遷移カバレッジ100%を保証することはない。そのため、この記述は誤りであり、不適切である。'), 
(18, '全状態カバレッジとは、テストで通過した状態の数をすべての状態の数で割った値である。', FALSE, '全状態カバレッジの定義として、テストで通過した状態数をすべての状態の数で割った値を求める方法は正しいため、したがって、適切である。'), 
(18, '100%の全遷移カバレッジを達成するためには、すべての有効遷移だけでなく、無効遷移もテストで通過しなければならないが、無効遷移はテスト実行を試みることが可能なものだけでよい。', FALSE, '全遷移カバレッジでは、有効遷移だけでなく、無効遷移もテストすることが必要です。無効遷移はテスト可能な場合のみ試みるべきという説明は正しい。そのため、適切である。'), 
(18, '通常、状態遷移図は有効遷移を記載するが、状態遷移表は有効遷移に加えて無効遷移も表現できるので、全遷移カバレッジを測定しやすい。', FALSE, '状態遷移図は有効遷移を示し、状態遷移表は有効遷移と無効遷移の両方を示すため、全遷移カバレッジを測定しやすいという点で正しい。そのため、適切である。'),

(19, 'ブランチテストは、システムが実装すべきビジネスルールを表現するのに適したデシジョンテーブルを作成してテストする技法である。', FALSE, 'ブランチテストは、コード内の判定を通すことを重視するテスト技法であり、デシジョンテーブルを使用するわけではない。この説明はブランチテストの特徴を誤って説明しているため、不適切である。'), 
(19, 'ステートメントテストは、ステートメント (コード内の文)を通すテストであり、コード内の命令と判定すべてを最低一回は通るようにテストするテスト技法である。', FALSE, 'ステートメントテストは、コード内の文（ステートメント）をカバーすることを目的としており、判定条件をカバーするのはブランチテストの特徴である。したがって、この説明は誤りであり、不適切である。'), 
(19, 'ステートメントテストのカバレッジ100%は、ブランチテストのカバレッジ100%を保証しないが、ブランチテスト100%は、ステートメントテストのカバレッジ100%を保証する。', TRUE, 'ステートメントテストのカバレッジ100%では、コード内のすべての文を通すことが保証されるが、ブランチテストのすべての分岐をカバーすることまでは保証されない。一方、ブランチテスト100%を達成すると、ステートメントテストのカバレッジも保証されるため、この説明は適切である。'), 
(19, 'ブランチテストは、コード内の判定を最低1回は通るようにテストするものなので、判定結果が真と偽の2つある場合は、どちらか1つを通せばよい。', FALSE, 'ブランチテストは、判定条件が真と偽の両方を通す必要があるため、片方だけを通せばよいわけではない。この説明は不十分であり、不適切である。'),

(20, 'エラー推測は、テストデータを複数のパーティションに分類して、各パーティションの代表的な要素だけをテストする技法である。', FALSE, 'これは、境界値分析や同値クラステストに関連する説明で、エラー推測の説明ではない。エラー推測は、過去の経験に基づいてエラーが発生しやすい部分を予測してテストを実行する技法なので、この説明は不適切である。'), 
(20, '探索的テストは形式的ではないテストであるが、活動を体系的に行うためにテストチャーターを作ってセッションベースドテストを行う場合がある。', TRUE, '探索的テストは形式的ではなく、テスト設計とテスト実行を同時に行う方法だが、テストチャーターを使って活動を体系化することができる。セッションベースドテストもその一環として用いられるため、この説明は適切である。'), 
(20, '探索的テストはフォールト攻撃という系統的なアプローチを用い、最初に経験を用いて起こりうるエラー、欠陥、故障のリストを作り、それを引き起こすテストケースを設計する技法である。', FALSE, 'これはフォールトインジェクションや攻撃的テストに関連する説明であり、探索的テストとは異なる。探索的テストは事前に決めたテストケースを実行するのではなく、実行中に得られた知識を基にテストを進める技法なので、この説明は不適切である。'), 
(20, 'エラー推測は、経験に基づいてチェックリストを作成し、それに基づいてテストする技法である。チェックリストは、テストケースに比べてハイレベルなテストである。', FALSE, 'エラー推測は、チェックリストを作成する方法ではなく、エラーが発生しやすい場所を予測してテストする技法である。この説明はチェックリストテストに関するものであり、エラー推測には当てはまらないので不適切である。'),

(21, 'リリース計画では、1回のイテレーションの終わりを見据えて、イテレーションのバックログを考慮した計画を立てる。', FALSE, 'リリース計画は通常、複数イテレーションを通して最終リリースを見据える計画であり、個々のイテレーション単位のバックログだけに焦点を当てるものではないため、不適切である。'), 
(21, 'イテレーション計画は、プロダクトバックログの定義やユーザーストーリーの作成、受け入れ基準の作成を行うものである。', FALSE, ' これらの作業は主にプロダクトバックログ作成やリリース計画の段階で行うものであり、イテレーション計画ではそれらをもとに作業範囲を決定するフェーズになるため、不適切である。'), 
(21, 'リリース計画はイテレーション計画に基づいてイテレーティブな開発が行われ、最後にリリースするタイミングで作成する。', FALSE, 'リリース計画は開発開始前に全体像を描くために最初に作成されるものであり、リリース直前に作るものではないため、不適切である。'), 
(21, 'リリース計画に関わるテスト担当者は、プロジェクトと品質のリスク分析やユーザーストーリーに関連するテスト工数の見積もり、テストアプローチの決定などを行う。', TRUE, 'テスト担当者はリリース計画段階で品質の確保のために、リスク分析や工数見積もり、テスト戦略の策定などを行うため、適切である。'),

(22, '現在のプロジェクトの早い時期に見積もりが行われるもので、これまでにかかったテスト工数を観測し、それを基に数学モデルを適用してこれからの工数を見積もる方法である。', TRUE, '外挿とは、過去の観測データを基にして将来の傾向を予測する手法であり、記述の内容はその特徴に合致しているため、適切である。'), 
(22, '複数の専門家が経験に基づいて工数を観測し、その結果を議論して合意したものを見積もりとする方法である。', FALSE, 'この記述は専門家による見積もり、特にデルファイ法の説明であり、外挿の説明としては不正確なため、不適切である。'), 
(22, '最も楽観的な推定値(a)、最も可能性の高い推定値(m)、最も悲観的な推定値(b)を専門家が作成し、一定の加重算術平均式により見積もりを得る方法である。', FALSE, 'これは三点見積もり（PERT法）と呼ばれる手法の説明であり、外挿ではないため、不適切である。'), 
(22, '組織内の過去の類似プロジェクトで収集されたテスト工数を基準にして、そのプロジェクトと新規プロジェクトの規模などに応じた比率をかけてテスト工数を見積もる方法である。', FALSE, 'この記述は、外挿ではなくアナロジー（類推）見積もりの説明であるため、不適切である。'),

(23, 'テスト計画書には、テスト条件を落とし込んだものとしてテストケースやテストデータ、テスト環境、トレーサビリティなどの具体的な内容を記載する。', FALSE, 'テスト計画書はテスト活動の概要や方針を示すものであり、テストケースやテストデータなどの具体的な内容は「テスト設計書」に記載される。テスト計画書には詳細なテスト内容は含まれないため、不適切である。'), 
(23, 'テスト計画書には、テストを行うのに必要なテストウェアとして、テストプロシージャ―やテストスイートなどを記載する。', FALSE, 'テスト計画書にはテストの実施に必要なリソースやアプローチが含まれることはあるが、テストプロシージャやテストスイートといった具体的なツールや技術的な詳細は、テスト設計書に記載されることが一般的。テスト計画書には高レベルの内容が含まれるため、不適切である。'), 
(23, 'テスト計画書には、テストの範囲や目的、リスクを決定したり、テストに対する包括的なアプローチを定義したりする内容が含まれる。', TRUE, 'テスト計画書はテスト活動の大枠を定義する文書であり、テストの範囲や目的、リスクなどの重要な項目を含む。また、テストのアプローチや方針も定義されるため、適切である。'), 
(23, 'プロダクトのテスト計画は、プロダクトのライフサイクル全体を通して行う活動だが、メンテナンスフェーズまでは延長されない。', FALSE, 'テスト計画は通常、プロダクトライフサイクル全体にわたって実施され、メンテナンスフェーズも含まれることが一般的。テスト計画がそのフェーズに達しないということは通常ないため、不適切である。'),

(24, '開始基準が満たされないままにテストを開始すると、難易度が上がり、時間やコストが増え、リスクが高まる。', FALSE, '開始基準を満たしていない状態でテストを開始すると、準備不足になってテストの難易度が上がり、時間やコストが増えるリスクが高まるため、適切である。'), 
(24, '終了基準が満たされていないままにテスト活動を終了すると、未解決の欠陥や潜在的な欠陥が多く残り、リリース後に故障を起こすリスクが高まる。', FALSE, '終了基準が満たされていない状態でテストを終了すると、未解決の欠陥が残り、リリース後に問題が発生するリスクが高まるため、適切である。'), 
(24, 'テスト終了基準では、テスト活動を終了するための達成条件を定義する。達成条件には、運用環境が準備できている、メンテナンスチームがアサインできている、ユーザー教育が終了しているなどがある。', TRUE, 'テスト終了基準はテスト活動そのものに関連する条件を定義するもので、運用環境の準備やユーザー教育の終了などはテスト終了基準には含まれないため、不適切である。'), 
(24, 'テスト終了基準を満たしていない場合でもビジネスニーズによりステークホルダーがプロダクトをリリースするリスクを見直して受け入れた場合は、テスト活動を切り上げる場合もある。', FALSE, 'ビジネスニーズにより、テスト終了基準が満たされていない場合でも、リリースを決定することがあるため、適切である。'),

(25, 'テスト工数に影響する要因には、プロダクトの特性、開発プロセスの特性、人の特性のほか、テストした結果も含まれる。検出した欠陥の数と重要度によって、再作業が必要となる場合があるからである。', FALSE, 'テスト工数に影響を与える要因として、プロダクトの特性や開発プロセス、人の特性、そしてテスト結果（欠陥の数と重要度）が含まれるため、適切である。'), 
(25, 'プロダクトに関連するリスクが高い、テストベースの品質が悪い、プロダクトの規模が大きい、品質特性の要件が厳しいなどは、どれもテスト工数を大きくする要因である。', FALSE, 'リスクの高さやテストベースの品質、プロダクトの規模、品質特性の要件などがテスト工数に大きな影響を与えるため、適切である。'), 
(25, '使用している開発モデルやテストプロセス、納期のタイトさなどは、基本的にテスト工数に影響しない。開発プロセスが変わっても、やるべきボリュームは一定である。', TRUE, '開発モデルやテストプロセス、納期のタイトさはテスト工数に大きな影響を与えるため、この選択肢は不適切である。開発プロセスが変われば、やるべきボリュームや方法も変わり、その結果として工数も異なるため、不適切である。'), 
(25, 'テストを見積もる技術には、メトリクスベースとエキスパートベースがある。外挿は前者の例で、ワイルドバンドデルファイは後者の例である。', FALSE, 'テストの見積もり技術には、メトリクスベースとエキスパートベースがあり、外挿（前者の技術）やワイルドバンドデルファイ（後者の技術）もその例に含まれるため、適切である。'),

(26, 'レビューや静的解析を支援するツールは、DevOpsツールに分類される。', FALSE, 'レビューや静的解析ツールはDevOpsツールに分類されず、静的テスト支援ツールに分類されるため、不適切である。'), 
(26, 'リグレッションテストで使う実行ツールやコードカバレッジツールなどは、代表的な静的テストの支援ツールである。', FALSE, 'リグレッションテストやコードカバレッジツールは動的テストに関連するツールであり、静的テストの支援ツールではないため、不適切である。'), 
(26, 'ロードテストやストレステストなど、手動では効果的に実行できないテストを支援する性能テストツールは、テストウェアのマネジメント支援ツールに分類される。', FALSE, '性能テストツールはテスト実行の支援ツールに分類されるため、テストウェアのマネジメント支援ツールに分類するのは不適切である。'), 
(26, 'テストケース作成支援ツールやテストデータ準備ツールなどは、テスト実装の支援ツールに分類される。', TRUE, 'テストケース作成支援ツールやテストデータ準備ツールはテスト実装の支援ツールとして使われるため、最も適切である。'),

(27, 'テストケース作成支援ツールやテストデータ準備ツールなどは、テスト実装の支援ツールに分類される。', FALSE, 'テスト自動化ツールには、反復する手動作業を削減して、時間の節約ができる利点があるため、適切である。'), 
(27, '静的解析やカバレッジなどのテスト自動化ツールの潜在的リスクとしては、テスト結果の評価の客観性が損なわれることが挙げられる。', TRUE, 'テスト自動化ツールは客観的に結果を評価するものであり、評価の客観性が損なわれることは少ないため、不適切である。'), 
(27, 'テスト自動化ツールの潜在的リスクとしては、導入に要する時間やコスト、工数を過小評価することが挙げられる。', FALSE, 'テスト自動化ツールの潜在的リスクとしては、導入に要する時間やコスト、工数を過小評価することが挙げられるため、適切である。'), 
(27, 'テスト自動化ツールの潜在的リスクとしては、テストツールの効果を過大に評価したり、ツールに過剰な依存をしたりすることが挙げられる。', FALSE, 'テスト自動化ツールの潜在的リスクとして、テストツールの効果を過大に評価したり、ツールに過剰に依存したりすることが挙げられるため、適切である。'),

(28, 'テスト前の作業は、実際にテストを実施するわけではないので、重要視しすぎることは避けるべきである。', FALSE, 'テスト前の作業はテストの準備段階としてとても重要。もしこれをおろそかにすると、実行するテスト自体の品質や効率が大きく影響を受ける可能性があるため、この記述は不適切である。'), 
(28, 'テスト計画では、テストベースを分析し、何をテストするか決定する。', FALSE, 'テスト計画の段階では、全体的なテストの戦略やスケジュール、リソースを決めることが主な内容。だが、テストベースを分析しテスト内容を決めるのは、実際にはテスト設計の段階のため、この記述は不適切である。'), 
(28, 'テスト設計では、テストの目的や終了基準を定義し、その後に全体のコンテキストにより課せられた制約下において目的を最も効果的に達成するアプローチを選択する。', FALSE, 'これはテスト設計の説明として適切だが、テスト実行前の作業に関する記述として適切ではないため、不適切である。'), 
(28, 'テスト実装では、テスト実行に必要な環境、機器、データなどを用意し、テストなどを用意し、テスト実行を可能な状態にする。', TRUE, 'テスト実装の段階で、テストの実行に必要な環境やデータを整えることが重要な作業。これがテスト実行を可能にするため、適切である。'),

(29, '早い段階で、欠陥を見つけることが重要。ソフトウェア開発ライフサイクルのなるべく早い段階でテストを行うことにより、コストを低減できる。', FALSE, 'この内容は「早期テスト（原則3）」に関するものであり、「欠陥の偏在（原則2）」の説明とは異なるため、この選択肢は不適切である。'), 
(29, '膨大なパターンをすべてテストすることは不可能。優先度を決めて、順にテストを実施する。', FALSE, 'この内容は「テストはすべてを実行できない（原則5）」に関するものであり、「欠陥の偏在（原則2）」の説明とは異なるため、この選択肢は不適切である。'), 
(29, 'あちこちに均等に存在するのではなく、特定の少数モジュールに集中する。', TRUE, '「欠陥の偏在」という原則は、欠陥がソフトウェア全体に均等に存在するわけではなく、特定の少数のモジュールに集中するという考え方であるため、この選択肢が正解。'), 
(29, 'すべてのソフトウェアに共通するテストはない。さまざまな条件を考慮して、テストの方法を決める。', FALSE, 'この内容は「テストは状況に依存する（原則7）」に関するものであり、「欠陥の偏在（原則2）」の説明とは異なるため、この選択肢は不適切である。'),

(30, 'トレーサビリティの確保は、ITガバナンスを確保していることの証明となり得る。', FALSE, 'トレーサビリティを確保することで、ソフトウェア開発の進捗や成果物の変更履歴を明確に追跡できる。これにより、ITガバナンスが適切に行われていることを証明でき、テストの目的として適切である。'), 
(30, '成果物の追跡は、テストケース作成の段階で開始すべきである。', TRUE, '追跡はテスト計画段階で確立し、開発の早い段階から取り組むことが望ましいため、テストの目的として不適切である。'), 
(30, 'トレーサビリティを確保しておくことで、仕様書の変更などに対応しやすくなる。', FALSE, 'トレーサビリティを確保しておくことで、変更があった場合にその影響範囲を明確に把握できる。仕様書の変更や要件変更にも柔軟に対応でき、プロジェクトの品質を保つために重要な手段。テストの目的として適切である。'), 
(30, 'トレーサビリティを確保できていることから得られる情報は、ステークホルダーやマネジメント層への説明にも用いられる。', FALSE, 'トレーサビリティは、ステークホルダーやマネジメント層への進捗報告や説明に活用でき、透明性を高めるために非常に有効。テストの目的として適切である。'),

(31, '思い込みや周囲の環境により、非合理的な判断をしてしまう。', FALSE, 'これは「確証バイアス」ではなく、一般的な認知バイアスに関する説明であるため、この選択肢は不適切である。'), 
(31, '持っている信念に合わない情報を受け入れがたくする心理現象。', TRUE, '確証バイアスは、自分の既存の信念や仮説に合う情報を強調し、それに反する情報を軽視または無視する心理的傾向。この選択肢が確証バイアスの本質を正確に説明しているため、適切である。'), 
(31, '他人の意見や指摘を優先して、自分の考えを常に疑う傾向のこと。', FALSE, 'これは「確証バイアス」の対極にあたる考え方で「自己疑念」のような概念に近い。したがって、この選択肢は不適切である。'), 
(31, 'テスト結果やデータを無作為に解釈し、すべての仮説を同じ重みで受け入れる傾向のこと。', FALSE, 'これは「検証バイアス」や「無作為な解釈」に関する説明であるため、この選択肢は不適切である。'),

(32, 'コーディング後', FALSE, 'コーディング後のテストは、バグを検出する役割が主になるが、バグの予防という観点からは遅い。ソフトウェア開発プロセスの早い段階でバグを予防することが重要であるため不適切である。'), 
(32, 'テスト設計時', FALSE, 'テスト設計時は、テスト計画やテストケースを設計する段階。このタイミングでシステムの動作に関して十分に考慮されるため、バグの予防に有効であると言えるが、まだ実際の実装が行われていないため、バグ予防の効果としては限定的である。テスト準備の一部として重要だが、他の選択肢と比べると効果が薄いため、不適切である。'), 
(32, '要求仕様のレビュー時', TRUE, '要求仕様のレビュー時は、ソフトウェア開発の初期段階で、設計や実装に入る前に問題点を洗い出せる段階。この段階で、要求や設計に関する誤解や不完全な部分を早期に見つけることで、後々のバグを予防することが可能になる。最も効果的にバグを予防できるタイミングと言えるため、適切である。'), 
(32, '結合テスト実行時', FALSE, '結合テスト実行時は、システムやモジュールが結合されてからのテスト段階。この段階でのテストは、バグを検出するためのものであり、予防という観点からは遅いため、不適切である。'),

(33, 'コンポーネントテスト', TRUE, 'モックやスタブなどを用いて、個々のコンポーネント（ユニット）を他と切り離してテストするという記述は、コンポーネントテスト（単体テスト）の特徴と一致しており、適切である。'), 
(33, 'コンポーネント結合テスト', FALSE, '複数のコンポーネント間のやり取りを検証するのが目的であるため、「切り離してテストする」という記述とは合わず、不適切である。'), 
(33, 'システムテスト', FALSE, 'システム全体としての動作を確認するため、全体が結合された状態でテストを行う。このため、「分離して行うテスト」という記述とは一致せず、不適切である。'), 
(33, 'システム結合テスト', FALSE, '複数のシステム間のインターフェースやデータ連携の確認が目的であるため、モックやシミュレーターを使って単独でテストする場面とは異なり、不適切である。'),

(34, 'ストレステスト', FALSE, 'システムが高負荷状態でも耐えられるかを確認する非機能テストの一種であるため、適切である。'), 
(34, 'セキュリティテスト', FALSE, 'システムが不正アクセスや攻撃に耐えられるかを確認する非機能テストであるため、適切である。'), 
(34, 'システムテスト', TRUE, 'システム全体の機能要件や非機能要件を満たしているかを確認するテストレベルの1つであり、「非機能テスト」という分類とは異なるため、不適切である。'), 
(34, 'ロード（負荷）テスト', FALSE, 'システムに一定の負荷をかけたときの挙動を確認する非機能テストの一種であるため、適切である。'),

(35, '要件定義', FALSE, '要件定義は「システムテスト」と対応する工程で、システム全体の仕様を明確にする段階のため、受け入れテストとは直接対応しないため、不適切である。'), 
(35, '基本設計', FALSE, '基本設計は「結合テスト」と対応する工程で、システム内の機能やモジュールの接続部分を設計する段階のため、受け入れテストとは対応しないため、不適切である。'), 
(35, '単体テスト', FALSE, '単体テストは「詳細設計」と対応する工程で、個々のモジュールをテストするためのものであり、受け入れテストの対象とはならないため、不適切である。'), 
(35, '要求分析', TRUE, '要求分析はユーザーや顧客のニーズを明らかにする工程で、その内容に基づいて「受け入れテスト」が実施される。したがって、受け入れテストと最も対応する工程は要求分析であるため、適切である。'),

(36, 'ユーザーが操作する画面の使いやすさを評価し、UIの改善点を抽出する作業のこと。', FALSE, 'これはユーザビリティ評価やUXデザインの領域であり、「影響度分析」とは異なる内容であるため、不適切である。'), 
(36, 'テスト実行中に発見された不具合の数を集計・分類する作業のこと。', FALSE, 'これは不具合管理や欠陥分析に該当し、「影響度分析」ではないため、不適切である。'), 
(36, 'テスト項目ごとの実行時間を分析し、効率的なテスト手順を決定する作業のこと。', FALSE, 'これはテスト効率やスケジューリングに関する分析であり、「影響度分析」とは関係がないため、不適切である。'), 
(36, 'システムの変更により既存システムがどの程度影響を受けるかチェックすること。', TRUE, '「影響度分析」は、システムに対する変更が他の部分にどのような影響を与えるかを評価するプロセスであり、これはその定義に合致しているため、適切である。'),

(37, '顧客やエンドユーザーによって実施されることがある。', FALSE, '受け入れテストは、システムがユーザーの要件を満たしているかどうかを確認するため、顧客やエンドユーザーが実施することがあるため、適切である。'), 
(37, '非機能要件も評価の対象となることがある。', FALSE, 'パフォーマンスやセキュリティなどの非機能要件も、受け入れ基準の一部として評価される場合があるため、適切である。'), 
(37, 'システム開発者が単体で実施し、実装の正しさを確認する。', TRUE, 'これは単体テストの特徴であり、受け入れテストの内容ではない。受け入れテストは開発者ではなく、主にユーザー側が実施するため、不適切である。'), 
(37, '運用環境に近い状況で実施されることが多い。', FALSE, '実際の運用に近い環境で行うことで、本番環境での問題を未然に防ぐのが受け入れテストの目的の一つのため、適切である。'),

(38, 'ウォークスルー', FALSE, 'ウォークスルーは、作業成果物を関係者と一緒に「歩きながら（ウォーク）」確認する形式のレビュー。作成者が成果物を説明し、参加者が質問や意見を出し合う形式のレビューであるため、適切である。'), 
(38, 'テクニカルレビュー', FALSE, 'テクニカルレビューは、専門的な技術的な観点から成果物をチェックするレビュー形式。主に技術的な問題や欠陥を発見するために行うため、適切である。'), 
(38, 'スタティックテスト', TRUE, 'スタティックテストは、コードやドキュメントを実行せずに静的にチェックすることを指し、レビュータイプには含まれないため、不適切である。'), 
(38, 'インスペクション', FALSE, 'インスペクションは、非常に形式的で厳格なレビューの一形態。特定の役割分担（リーダー、レビュアーなど）があり、詳細なチェックリストに基づいて成果物を確認するため、適切である。'),

(39, 'チェックリストベース', FALSE, 'チェックリストベースのレビューは、あらかじめ用意されたチェックリストに基づいて成果物を確認する技法。見落としを減らし、効率的に欠陥を見つけるのに役立つため、適切である。'), 
(39, 'シナリオベース', FALSE, 'シナリオベースのレビューは、特定の利用シナリオ（ユーザの操作や業務フローなど）を想定して、成果物を確認する技法。実際の使用場面を意識したレビューができるため、適切である。'), 
(39, 'パースペクティブベース', FALSE, 'パースペクティブベースのレビューは、異なる視点（例：ユーザー視点、テスト担当視点など）から成果物を確認する技法。多角的な検証ができる点が特徴のため、適切である。'), 
(39, 'ベースラインレビュー', TRUE, 'ベースラインレビューという名称のレビュー技法は存在しない。ベースライン自体は構成管理の用語であり、レビュー技法とは異なる概念であるため、不適切である。'),

(40, 'ロールベース', TRUE, 'ロールベースのレビューは、特定の「役割（ロール）」（たとえばユーザー、開発者、テスト担当者、保守担当など）になりきって成果物を確認する方法。まさに「ステークホルダーになりきる」レビュー技法である。これはパースペクティブベースレビューと非常に似た考え方であり、時に同義として扱われることもあるため、適切である。'), 
(40, 'アドホック', FALSE, 'アドホックレビューは、事前準備や構造化された手法を使わず、自由にレビューする方式。ステークホルダーの視点になるような枠組みは特に存在しないため、不適切である。'), 
(40, 'チェックリストベース', FALSE, 'チェックリストベースは、あらかじめ決められた項目に従って確認する技法であり、特定の視点になりきるというものではないため、不適切である。'), 
(40, 'シナリオベース', FALSE, 'シナリオベースレビューは、特定の業務フローやユースケースに沿ってレビューする技法で、ユーザーの動作を追う形式ではあるが、「ステークホルダーになりきる」という点ではロールベースほど明確ではないため、不適切である。'),

(41, '欠陥を早期に検出して修正コストを下げる。', FALSE, 'レビューの主な目的の一つ。設計や仕様の段階で欠陥を見つけて修正すれば、後工程（テストや運用）での修正よりもコストが小さく済むため、適切である。'), 
(41, 'テストケースの網羅性を保証する。', TRUE, 'レビューによってテストケースの内容を確認することはあるが、「網羅性を保証する」ことはレビューの目的ではない。網羅性は主にテスト設計技法やテスト実行で評価される。レビューはあくまで妥当性や欠陥の発見が目的であり、「保証」という表現は不適切である。'), 
(41, '仕様や設計の妥当性を確認する。', FALSE, 'レビューは、成果物が要件に合っているか、論理的に正しいかなどを確認する場であり、妥当性の確認は重要な目的の一つのため、適切である。'), 
(41, 'チーム内の知識共有を促進する。', FALSE, 'レビューでは他メンバーの作業内容や設計意図に触れる機会があるため、自然と知識共有が行われる。これはレビューの副次的効果としてよく挙げられるため、適切である。'),

(42, 'チーム内で非公式なディスカッションを通じて実施される。', FALSE, 'これは「ウォークスルー」や「アドホックレビュー」の特徴。インスペクションは形式的・構造的なレビューであり、非公式とは正反対のため、不適切である。'), 
(42, 'ファシリテーター、作成者、レビューア、書記などの明確な役割分担がある。', TRUE, 'インスペクションは最も形式的なレビュー技法であり、あらかじめ定められたプロセスと役割分担（モデレーター＝ファシリテーター、作者、レビュアー、書記など）が特徴。チェックリストを使った事前準備や、指摘の記録・集計も含まれるため、適切である。'), 
(42, 'レビュー対象者のみがコメントを提出し、他者の参加はない。', FALSE, '他の参加者がコメントに参加しないのは、インスペクションの定義に反するため、不適切である。'), 
(42, '自動ツールを用いてコードのパターンや規則違反を検出する。', FALSE, 'これは「静的解析（スタティックアナリシス）」に該当する手法。ツールによる自動処理であり、人間によるレビュー（インスペクション）とは別物のため、不適切である。'),

(43, '7文字、8文字、20文字、21文字', TRUE, '境界値分析において適切な組み合わせ。7文字（下限-1）、8文字（下限）、20文字（上限）、21文字（上限+1）をカバーしている。'), 
(43, '6文字、9文字、19文字、22文字', FALSE, '6文字と22文字は境界値を外れており、テストに不要な値が含まれているため、不適切である。'), 
(43, '8文字、10文字、15文字、20文字', FALSE, '8文字と20文字は境界値だが、10文字や15文字は境界値をカバーしていないため、不適切である。'), 
(43, '7文字、10文字、20文字、30文字', FALSE, '7文字は下限-1としてテストには適切だが、10文字や30文字は境界値分析に必要な範囲ではないため、不適切である。'),

(44, 'エラー推測', FALSE, 'エラー推測は経験に基づいてテストケースを設計し、未知の欠陥を見つける方法であり、テスト対象の入力ルールが複雑で明確な場合、システムの振る舞いを体系的に予測できないため不適切である。'), 
(44, '状態遷移テスト', FALSE, '状態遷移テストは、システム内の状態遷移を確認するテスト技法で、状態遷移のあるシステムには適しているが、入力のルールが明確で複雑な場合、状態遷移に焦点を当てる必要がなく、効果的なテストにはならないため、不適切である。'), 
(44, '同値分割＋境界値分析', TRUE, '同値分割と境界値分析は、入力値が複雑で正しい入力ルールが明確な場合に非常に有効なテスト技法であり、境界値を含む異常値や境界付近の値を網羅的にテストすることで、効果的にシステムの動作を検証できるため、適切である。'), 
(44, '探索的テスト', FALSE, '探索的テストは、事前にテストケースを設計せず、テストを実行しながら新たなテストケースを発見していく方法であり、入力ルールが複雑で明確な場合には、十分に計画的にテストが行えず、効果的なテストには不適切である。'),

(45, '仕様が詳細に書かれており、すべての入力条件が明確である場合。', FALSE, '仕様が詳細に記載されていると、エラー推測のように直感や経験に基づいたテストが効果を発揮しづらいため、不適切である。'), 
(45, '入力値の範囲が厳密に定義されており、分類もしやすい場合。', FALSE, '入力値の範囲が厳密に定義されており、分類しやすい場合は、エラー推測よりも同値分割や境界値分析などの他のテスト技法が有効なので、エラー推測は不適切である。'), 
(45, '以前に類似のバグが多発していた領域を再テストする場合。', TRUE, 'エラー推測は過去に発生したバグや欠陥に基づいてテストを設計するため、以前に類似のバグが多発していた領域を再テストする場合には最も効果的に適用でき、適切である。'), 
(45, '複雑な状態遷移があるため、遷移網羅が重要な場合。', FALSE, '状態遷移が複雑で遷移網羅が重要な場合には、状態遷移テストなど他の技法が適切であり、エラー推測はこのようなケースでは不適切である。'),

(46, 'ステートメントカバレッジではループの回数を制御できないため。', FALSE, 'ステートメントカバレッジは文の実行を確認する指標で、ループの条件の多様な実行パターン（例えば0回や複数回など）を意識したものではないが、主な欠陥の見逃し理由とは言えないため、不適切である。'), 
(46, 'ステートメントカバレッジはすべての変数を検査しないため。', FALSE, 'カバレッジは実行されたコードの量に関する指標で、変数の検査の有無とは直接関係がないため、不適切である。'), 
(46, 'すべての条件分岐の真偽パターンを網羅するわけではないため。', TRUE, 'ステートメントカバレッジは各文が少なくとも1回実行されたかどうかのみを確認するもので、条件分岐の全ての真偽のパターン（例えばif文のtrueとfalse両方）を網羅するとは限らないため、適切である。'), 
(46, 'ステートメントカバレッジではブラックボックス技法が使えないため。', FALSE, 'ブラックボックス技法とステートメントカバレッジは異なる視点（前者は仕様ベース、後者は構造ベース）であり、直接的な関係はないため、不適切である。'),

(47, '同値分割は入力値の境界を重視するが、境界値分析は入力の分類を行う。', FALSE, '内容が逆になっている。同値分割は入力の分類（同じ結果が得られる値のグループ化）を行い、境界値分析はその分類の境界に注目してテストケースを作るため、不適切である。'), 
(47, '同値分割は仕様ベースだが、境界値分析は構造ベースの技法である。', FALSE, '境界値分析も同値分割と同じく仕様ベースのブラックボックステスト技法。構造ベース（ホワイトボックス）ではないので、不適切である。'), 
(47, '境界値分析は同値クラスの代表値だけを使用するが、同値分割では境界に着目する。', TRUE, 'これも説明が逆。同値分割が代表値、境界値分析が境界に着目する。不適切である。'), 
(47, '同値分割ではクラス内の任意の値を代表として選ぶが、境界値分析では極値を選ぶ。', FALSE, '同値分割は、同じ結果が得られる入力のグループ（同値クラス）ごとに1つ代表値を選ぶ。境界値分析は、その同値クラスの境界付近（最小値や最大値など）の値に注目してテストする。両者の違いを正しく説明しているため、適切である。'),

(48, '開発者が自分のコードをよく理解しているため、バグの見逃しが減る。', FALSE, 'これは開発者が自分のコードをテストする場合のメリットですが、独立したテストの利点としては適切でない。独立したテストは、開発者とは異なる視点でテストが行われることが主な利点であるため、不適切である。'), 
(48, '開発者とは異なる視点でテストが実施されるため、客観的な評価やバイアスの排除が期待できる。', TRUE, '独立したテストは、開発者と異なる視点で行われるため、客観的な評価やバイアスの排除が期待できる。このため、最も適切である。'), 
(48, '開発チームとテストチームが同じ視点で確認できるため、効率的な開発が可能になる。', FALSE, '開発チームとテストチームが異なる視点でテストを行うことが、独立したテストの主な利点であり、同じ視点で確認することは効率的な開発にはならないため、不適切である。'), 
(48, 'テスト実行のコストが下がるため、全体の開発費用を削減できる。', FALSE, '独立したテストの目的は、バイアスを排除し、客観的なテストを行うことにあり、必ずしもテスト実行のコストが下がるわけではないため、不適切である。'),

(49, '開発チームとテストチーム間の連携不足により、対立やコミュニケーションの課題が生じる可能性がある。', TRUE, '独立したテストの欠点の一つとして、開発チームとテストチームの間に連携不足が生じ、対立やコミュニケーションの問題が発生する可能性があるため、最も適切である。'), 
(49, '開発とは異なる視点でテストを行うことで、客観性が高まり品質向上が期待できる。', FALSE, 'これは独立したテストの利点に関する記述であり、欠点を説明するものではないため、不適切である。'), 
(49, '独立したテストでは、ユーザーの視点が取り入れにくくなるため、使いやすさの評価が難しくなる。', FALSE, '独立したテストは、開発者とは異なる視点で行われるため、必ずしもユーザー視点を欠くわけではない。ユーザビリティテストやUXテストを行うことで、使いやすさの評価ができるため、これは不適切である。'), 
(49, '第三者がテストを行うことで、仕様や設計に対する先入観を排除できる。', FALSE, 'これは独立したテストの利点の一つであり、欠点を示していないため、不適切である。'),

(50, 'テストの実行は開発者の判断に任せ、状況に応じて自由にテスト設計を行うスタイル。', FALSE, '「プロセス準拠」の説明ではなく、自由度の高いアプローチを示しています。テスト戦略の「プロセス準拠」では、決められたプロセスや規範に従うことが求められるため、この選択肢は不適切である。'), 
(50, '外部のルールや業界固有の標準を使用してテストを進めるアプローチ。', TRUE, '「プロセス準拠」では、業界や外部の標準や規範に従ってテストを実施するアプローチが適切であるため、この選択肢は適切である。'), 
(50, 'ユーザーの行動を観察して、使いやすさに重点を置いたテストを行うアプローチ。', FALSE, 'これは「ユーザビリティテスト」に関する説明であり、「プロセス準拠」の説明ではないため、不適切である。'), 
(50, 'ランダムに操作を行い、予期しないバグを発見することを目的としたテスト手法。', FALSE, 'これは「ランダムテスト」や「エクスプロラトリテスト」の説明であり、プロセスに従うアプローチを示しているわけではないため、不適切である。'),

(51, 'テスト計画レポート', FALSE, 'テスト計画レポートはテストの実施前に作成されるもので、テストの進捗や結果を報告するレポートには適していないため、不適切である。'), 
(51, 'テスト進捗レポート', TRUE, 'テスト進捗レポートは、テストの進行状況やステータスを管理するための重要なレポートであり、進捗を報告するために適切である。'), 
(51, 'テスト設計レポート', FALSE, 'テスト設計レポートは、テストケースやテスト計画の詳細を記載するもので、進捗を報告するレポートとしては不適切である。'), 
(51, 'テスト実行レポート', FALSE, 'テスト実行レポートは実行したテスト結果を報告するもので、進捗を管理するレポートとしては不適切である。'),

(52, 'プロダクトリスクはスケジュールの遅延や予算超過に関するリスクであり、プロジェクトリスクは製品に存在する欠陥のリスクを指す。', FALSE, 'プロダクトリスクは製品に関するリスクであり、プロジェクトリスクはスケジュールや予算に関するリスクを指すため、この選択肢は不適切である。'), 
(52, 'プロダクトリスクもプロジェクトリスクも、どちらも開発チームの人間関係に関するリスクを指す。', FALSE, 'プロダクトリスクとプロジェクトリスクは、人間関係に関するリスクだけではない。プロダクトリスクは製品やシステムの要件を満たさないリスク、プロジェクトリスクは進行やスケジュールに関するリスクのため、不適切である。'), 
(52, 'プロジェクトリスクは製品の品質に直接関係するリスクであり、プロダクトリスクはプロジェクト計画の失敗に関するリスクである。', FALSE, 'プロジェクトリスクはスケジュールや予算、リソースに関わるリスクであり、プロダクトリスクは製品の品質や要件を満たさないことに関連するリスクのため、この選択肢は不適切である。'), 
(52, 'プロダクトリスクは製品やシステムが要件を満たさないリスクであり、プロジェクトリスクは開発やテストの進行に関わるリスクを指す。', TRUE, 'プロダクトリスクは製品が要件を満たさないリスク、プロジェクトリスクはプロジェクトの進行、スケジュール、予算、リソースに関連するリスクのため、適切である。'),

(53, 'テスト設計および実装ツール', FALSE, 'テスト設計および実装ツールは、テストの設計や実装を支援するツールであり、欠陥管理や要件管理には関係ないため、不適切である。'), 
(53, 'マネジメントツール', TRUE, 'マネジメントツールは、要件や欠陥の管理を目的としたツールであり、プロジェクト管理や進捗追跡、リスク管理などにも使用されるため、適切である。'), 
(53, '非機能テストツール', FALSE, '非機能テストツールは、システムの性能やセキュリティ、可用性などの非機能要件に関するテストを支援するツールであり、要件や欠陥管理には関係ないため、不適切である。'), 
(53, 'コラボレーションツール', FALSE, 'コラボレーションツールは、チーム内のコミュニケーションや協力を支援するツールであり、要件や欠陥管理の目的には不適切である。'),

(54, 'ソフトウェアに監視コード（プローブ）を組み込むことで、システムの動作に影響が出る現象。', TRUE, 'ソフトウェアに監視コード（プローブ）を組み込むことで、システムの動作に影響が出る現象は、プローブ効果の説明として適切である。'), 
(54, 'テストツールを使うことで、ソフトウェアのバグが自動的に修正される現象。', FALSE, 'テストツールを使うことで、ソフトウェアのバグが自動的に修正される現象は、プローブ効果とは関係ないため、不適切である。'), 
(54, '複数人で同時にテストを実施することで、テスト効率が向上する現象。', FALSE, '複数人で同時にテストを実施することで、テスト効率が向上する現象は、プローブ効果とは関係ないため、不適切である。'), 
(54, 'テストケースの順序を変えることで、結果が変わってしまう現象。', FALSE, 'テストケースの順序を変えることで、結果が変わってしまう現象は、プローブ効果とは関係ないため、不適切である。'),

(55, '反復する手動作業の削除と時間の節約ができる。', TRUE, '反復する手動作業の削除と時間の節約ができるのは、テスト自動化の主な利点であるため、適切である。'), 
(55, '少ない導入コストで大きな効果が期待できる。', FALSE, 'テスト自動化には初期コストや時間がかかることが多いため、不適切である。'), 
(55, 'テスト実行ツールのバージョンを適宜アップデートすることで、最新のプラットフォームに対応できる。', FALSE, 'テスト実行ツールのバージョンを適宜アップデートしても、最新のプラットフォームに対応できるとは限らないため、不適切である。'), 
(55, 'オープンソースプロジェクトは無償で継続的に活用ができる。', FALSE, 'オープンソースプロジェクトであっても、無償で継続的に活用できるとは限らないため、不適切である。'),

(56, 'ツールが全てのバグを見つけることができるかどうか。', FALSE, 'ツールが全てのバグを見つけることができるかどうかは、ツールの効果測定としては過度な期待であり、不適切である。'), 
(56, '自動化されたテストが手動テストよりも必ず速く実行できるかどうか。', FALSE, '自動化されたテストが手動テストよりも必ず速く実行できるかどうかは、ツールの効果測定の一部にはなるかもしれないが、それだけでは評価できないため、不適切である。'), 
(56, 'テスト自動化の適用範囲と、テストのカバレッジの向上を定期的に確認する。', TRUE, 'テスト自動化の適用範囲と、テストのカバレッジの向上を定期的に確認するは、テストツールの効果を測定するための最も適切な方法である。テストのカバレッジや適用範囲を確認することで、ツールの効果を具体的に評価できるため、適切である。'), 
(56, 'ツールの使用後、特に改善が見られなくてもツールを続けること。', FALSE, 'ツールの使用後、特に改善が見られなくてもツールを続けることは、ツールの効果を測定する方法として適切でない。効果が見られない場合は、使用を見直すべきであるため、不適切である。'),

(57, 'パイロットプロジェクトでは、テストツールの費用対効果が自動的に算出されるため。', FALSE, 'パイロットプロジェクトでは、テストツールの費用対効果が自動的に算出されるため、というのは誤り。費用対効果を算出するには、導入後のデータ分析が必要であり、自動的には算出されないため、不適切である。'), 
(57, 'どのようなプロジェクトでも、最初から本格導入する方が効率的であることを確認するため。', FALSE, 'どのようなプロジェクトでも、最初から本格導入する方が効率的であることを確認するため、というのは誤り。最初から大規模に導入するのはリスクが高く、パイロットプロジェクトで試す方が適切であるため、不適切である。'), 
(57, 'テストツールの有効性や適合性を小規模な範囲で評価し、リスクを最小限に抑えるため。', TRUE, 'テストツールの有効性や適合性を小規模な範囲で評価し、リスクを最小限に抑えるため、パイロットプロジェクトで試行的に導入することが最も適切である。'), 
(57, 'パイロットプロジェクトでは、テストの自動化が不要であることを証明するため。', FALSE, 'パイロットプロジェクトでは、テストの自動化が不要であることを証明するため、というのは誤り。パイロットプロジェクトはツールの適合性や有効性を評価するために行うもので、自動化が不要であることを証明するためのものではないため、不適切である。'),

(58, 'レコード＆プレイバックアプローチ', FALSE, 'レコード＆プレイバックアプローチは、テストの実行を録画して後で再生する方法であるが、複雑なテストシナリオには対応しづらく、メンテナンスが難しくなるため、不適切である。'), 
(58, '手動テストアプローチ', FALSE, '手動テストアプローチはテストを人間が手動で行う方法であり、テスト自動化ツールを使用する利点を活かせないため、不適切である。'), 
(58, 'キーワード駆動テストアプローチ', TRUE, 'キーワード駆動テストアプローチは、テストの自動化を効率的に進める方法として最も適切であり、テストケースの再利用性が高く、メンテナンスが容易になるため、適切である。'), 
(58, 'スクリプト乱用アプローチ', FALSE, 'スクリプト乱用アプローチは、スクリプトを乱用するとテストが過剰に複雑になり、メンテナンス性が低くなるため、不適切である。'),

(59, 'ツール導入の前に、導入目的・対象業務・運用体制を明確にし、関係者との合意を取ること。', TRUE, 'ツール導入前に目的や業務内容を明確にし、関係者と合意を得ることは、成功に繋がるため、適切である。'), 
(59, 'ツールの仕様書通りに導入すれば、現場のプロセスに関係なく成果が出ると判断すること。', FALSE, 'ツールは現場のプロセスに合わせて運用する必要があり、仕様書通りに導入するだけでは不十分なため、不適切である。'), 
(59, 'ツールの選定において、コストよりもUIデザインを最優先にすること。', FALSE, 'UIデザインが優れていても、コストや機能性を優先すべきであり、UIデザインだけでは最適なツール選定ができないため、不適切である。'), 
(59, 'ツールのベンダー任せで、導入後のトレーニングやサポートは最小限にすること。', FALSE, '導入後のトレーニングやサポートは重要であり、最小限にすることは導入の効果を最大化できないため、不適切である。'),

(60, 'ツールが提供する機能と価格のバランス。', TRUE, 'テストツールの選定には、機能がプロジェクトのニーズに合致し、その価格が予算内であることが重要であるため、適切である。'), 
(60, 'ツールが他のプロジェクトで既に使用されているかどうか。', FALSE, '他のプロジェクトでの使用実績も参考にはなるが、重要なのはプロジェクトのニーズに合ったツールであることのため、不適切である。'), 
(60, 'ツールが最も人気のあるものであること。', FALSE, '人気があること自体は重要ではなく、ツールが実際にプロジェクトの要件を満たしているかどうかが最も重要な基準となるため、不適切である。'), 
(60, 'ツールが使用されている国の数。', FALSE, '使用されている国の数が多いことは必ずしも選定基準にはならないため、不適切である。');
