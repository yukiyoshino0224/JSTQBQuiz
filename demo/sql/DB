--テーブル削除
DROP TABLE IF EXISTS choices, questions CASCADE;

-------------

CREATE TABLE questions (
    id SERIAL PRIMARY KEY,
    chapter INT NOT NULL,
	chapter_title TEXT NOT NULL,
    question TEXT NOT NULL,
    explanation TEXT
);

CREATE TABLE choices (
    id SERIAL PRIMARY KEY,
    question_id INT NOT NULL,
    choice_text VARCHAR(255) NOT NULL,
    is_correct BOOLEAN NOT NULL,
    FOREIGN KEY (question_id) REFERENCES questions(id) ON DELETE CASCADE
);

-------------

INSERT INTO questions (chapter, chapter_title, question, explanation) 
VALUES 
(1, 'テストの基礎', 'すべてのプロジェクトに共通するテストの目的として、適切でないものはどれか。次の選択肢の中から1つ選びなさい', '')
,(1, 'テストの基礎', 'テストとデバッグの違いについて、最も当てはまるものはどれか。次の選択肢の中から1つ選びなさい', '')
,(1, 'テストの基礎', 'テストにより欠陥を発見し、リリース前にそれを取り除くことで、運用に入ってから故障が起きたり、ステークホルダーのニーズに合致しなかったりするリスクを低減できる。それを効果的に行うには、テスト担当者がソフトウェア開発ライフサークルの各フェーズに関与することが大切である。各フェーズに対する関与の仕方として、最も適切でないものはどれか。次の選択肢の中から1つ選びなさい', '')
,(1, 'テストの基礎', '品質保証(QA)と品質コントロール(QC)、テスト、および品質マネジメント(QMS)の関係で最も当てはまるものはどれか。次の選択肢の中から1つ選びなさい', '')
,(1, 'テストの基礎', 'エラーと欠陥と故障の関係で最も適切でないものはどれか。次の選択肢の中から1つ選びなさい', '')

,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'ソフトウェア開発ライフサイクルモデルとテストの関係として、最も適切なものはどれか。次の選択肢から1つ選びなさい。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'どのようなソフトウェア開発ライフサイクルにも共通する、よいテストの実践として、最も最適なものはどれか。次の選択肢から1つ選びなさい。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', '次のテスト駆動開発の説明における①に当てはまる用語として、最も適切なものはどれか。次の選択肢から1つ選びなさい。テスト駆動開発では、テストを最初に書き、次にテストを満たすようにコードを書き、そしてテストとコードを（①）する。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'テストをする観点から見たDevOpsの利点として、最も最適なものはどれか。次の選択肢から1つ選びなさい。', '')
,(2, 'ソフトウェア開発ライフサイクル全体を通してのテスト', 'シフトレフトアプローチの説明として、最も適切なものはどれか。次の選択肢から1つ選びなさい。', '')

,(3, '静的テスト', '静的テストには、レビューと静的解析があり、ほとんどの作業成果物がテスト対象となる。静的テストの説明として適切でないものはどれか。次の選択肢の中から1つ選びなさい', '')
,(3, '静的テスト', '次の中で静的テストの利点として適切でないものはどれか。次の選択肢の中から1つ選びなさい', '')
,(3, '静的テスト', '静的テストと動的テストの違いを説明する文章として、適切でないものはどれか。次の選択肢の中から1つ選びなさい', '')
,(3, '静的テスト', 'レビュープロセスを説明する文章として適切でないものものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(3, '静的テスト', 'レビューにおける参加者の役割と責務を説明する文章として、最も適切なものはどれか。次の選択肢の中から1つ選びなさい', '')

,(4, 'テスト分析と解析', 'テスト技法の分類を説明する文章の中で最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(4, 'テスト分析と解析', '状態遷移テストはブラックボックステスト技法の1つである。状態遷移テストを説明する文章の中で適切でないものはどれか。次の選択肢の中から1つ選びなさい', '')
,(4, 'テスト分析と解析', '状態遷移図および状態遷移表に基づく状態遷移テストを説明する文書の中で適切でないものはどれか。次の選択肢の中から1つ選びなさい', '')
,(4, 'テスト分析と解析', 'ステートメントテストとブランチテストは、代表的なホワイトボックステスト技法である。この2つのテスト技法を説明する文章の中で、最も適切なものはどれか。次の選択肢の中から1つ選びなさい', '')
,(4, 'テスト分析と解析', 'エラー推測と探索的テストは、代表的な経験ベースのテスト技法である。この2つのテスト技法を説明する文章の中で最も適切なものはどれか。次の選択肢の中から1つ選びなさい', '')

,(5, 'テスト活動のマネジメント', 'イテレーティブ開発モデルにおける計画プロセスを説明する文章の中で、最も適切なものはどれか。次の選択肢の中から1つ選びなさい', '')
,(5, 'テスト活動のマネジメント', 'テスト工数の見積もり技法を説明する文章の中で、外挿を説明しているものはどれか。次の選択肢の中から1つ選びなさい', '')
,(5, 'テスト活動のマネジメント', 'テスト計画書はテスト活動を概説するものである。テスト計画書に記載すべき内容として適切なものはどれか。次の選択肢の中から1つ選びなさい', '')
,(5, 'テスト活動のマネジメント', 'テストをいつ開始するか、いつ終了するかを判断するために、テストの開始基準と終了基準を定義することは重要である。この2つを説明する文章の中で適切でないものはどれか。次の選択肢の中から1つ選びなさい', '')
,(5, 'テスト活動のマネジメント', 'テスト工数を見積もる上で適切でないものはどれか。次の選択肢の中から1つ選びなさい', '')

,(6, 'テストツール', 'テスト活動を支援するテストツールには様々な種類がある。テストツールの分類の説明として、最も適切なものはどれか。次の選択肢の中から1つ選びなさい。', '')
,(6, 'テストツール', 'テスト自動化ツールには利点もあるがリスクもある。テスト自動化ツールの利点とリスクの説明として、適切でないものはどれか。次の選択肢の中から1つ選びなさい', '');


INSERT INTO choices (question_id, choice_text, is_correct) 
VALUES 
(1, '要件、ユーザーストーリー、設計、およびコードなどの作業成果物を評価することによって欠陥を防ぐ。', FALSE), 
(1, 'コード変更からリリースまでの処理を自動化して作業効率を高める。', TRUE), 
(1, 'テスト対象が完成したことを確認し、ユーザーやその他ステークホルダーの期待どおりの動作内容であることの妥当性を確認する', FALSE), 
(1, '欠陥や故障を発見し、ソフトウェアの品質が不適切になるリスクレベルを軽減する', FALSE),

(2, 'テストはソフトウェアに存在する欠陥を見つけることで、デバッグはそれに加えて、解析して取り除くまでの一連の作業が含まれる', TRUE), 
(2, 'テストはコンポーネント内の欠陥を見つけることで、デバッグはコンポーネント間の連携部分の欠陥を見つけること', FALSE), 
(2, 'テストはソフトウェアを動作させて故障を見つけ、その原因を探って欠陥を見つけることで、デバッグはソフトウェアを動作させないで直接欠陥を見つけること', FALSE), 
(2, 'テストはコードを修正した際に正しく修正されたことを確認することで、デバッグはその修正により既存官箇所に予期せぬ影響が発生していないかを確認すること', FALSE),

(3, 'テスト担当者が要件レビューやユーザーストーリーの洗練作業に関与することにより、開発担当者と異なる視点でこれらの作業成果物の欠陥を検出できる', FALSE), 
(3, 'システム設計時にテスト担当者が設計担当者と密接に連携して作業することにより、両者が設計とその設計をどうテストするかに対する理解を深めることができる', FALSE), 
(3, 'コード開発者にテスト担当者が開発担当者と密接に連携することにより、テストで見つかった欠陥をテスト担当者自らが効率よく取り除くことができる', TRUE), 
(3, 'テスト担当者が要件定義のレビューに参加すると、テスト担当者の知見を活かした提案ができ、要件定義作業に貢献できる', FALSE),

(4, '品質マネジメントは、品質が適切なレベルに到達していることを示すために、テストを含む必要なプロセス全体を実行する必要がある', FALSE), 
(4, '品質コントロールは、品質が適切なレベルに到達するようにテストを含む適切な作業を行うことである', TRUE), 
(4, 'テストは、品質保証と品質コントロールの両方を含む上位概念で品質に関して組織の方針を示し、組織をコントロールするための活動をすべて含む', FALSE), 
(4, '品質保証は、ソフトウェアの品質を評価し、運用環境でソフトウェアの故障が発生するリスクを低減する1つの手段である', FALSE),

(5, '人間はエラー(誤り)を起こす。そのエラーが作業成果物の欠陥(フォールトまたはバグ)となる', FALSE), 
(5, '欠陥のあるコードが実行されると、故障が発生することがある。そのため故障ができるだけ発生しないように欠陥を見つけるのがテストの役割である', FALSE), 
(5, '故障が起きたからといって、必ずコードの中に欠陥があるとは限らない。環境条件やハードウェアの構成変更などにより故障が起きる場合もある', FALSE), 
(5, 'テストにより欠陥でないものを欠陥とすることを偽陰性(誤検出)といい、検出すべき欠陥を検出しないことを偽陽性(検出漏れ)という', TRUE),

(6, 'シーケンシャル開発モデルでは、SDLCの初期段階において、要件レビュー、テスト分析、およびテスト設計に参加し、動的テストの実行まで行う。', FALSE), 
(6, 'イテレーティブ開発モデルでは、核イテレーションで静的テストと動的テストのどちらかを実行し、リリースまでに両方が行われるようにする。', FALSE), 
(6, 'インクリメンタル開発モデルでは、インクリメントを頻繁に提供するために、迅速なフィードバックと広範なリグレッションテストが必要となる。', TRUE), 
(6, 'アジャイルソフトウェア開発ではテスト自動化を充実させるとともに、手動テストはホワイトボックステスト技法を使用して行われる傾向がある。', FALSE),

(7, 'すべてのテストレベルの目的は共通である。', FALSE), 
(7, '各テストレベルのテスト分析や設計は、対応するSDLCの開発フェーズが始まる前に開始する。', FALSE), 
(7, '開発活動の作業成果物のドラフトができたらすぐにテスト担当者がレビューに関与する。', TRUE), 
(7, '各開発活動に対応したテスト活動を品質コントロールの対象とし、開発活動は品質コントロールの対象外とする。', FALSE),

(8, 'リグレッション', FALSE), 
(8, 'リファクタリング', TRUE), 
(8, '継続的インテグレーション', FALSE), 
(8, 'フィードバック', FALSE),

(9, 'コード品質を迅速にフィードバックする。', TRUE), 
(9, 'ユーザーの視点からのテストを自動化する。', FALSE), 
(9, '非機能品質特性に対する観点を減らす。', FALSE), 
(9, 'テスト自動化の確立と保守を容易にする。', FALSE),

(10, 'テスト仕様書のレビューに開発担当者が関与する。', FALSE), 
(10, '動的テストの前にソースコードの静的解析を完了する。', TRUE), 
(10, 'コンポーネントテストレベルでブラックボックステスト技法を用いる。', FALSE), 
(10, 'リグレッションテストをコンポーネントテストレベルから開始する。', FALSE),

(11, 'レビューの対象には、仕様書はユーザーストーリー、ユーザーガイドなどの作業成果物だけでなく、コードも含まれる', FALSE), 
(11, '静的解析ツールを使うと、コードやモデルなどの構造的な作業成果物に対して効率的にテストができる。一方、レビューを行えば、自然言語で記述された作業成果物に対して、誤字脱字、文法、読みやすさを評価することができる', FALSE), 
(11, 'テスト計画書やテストケースなどのテストウェアはシステム開発の作業成果物ではなく、テストのための成果物である。そのため、これらは静的テストの対象に含まれない。', TRUE), 
(11, '静的解析は、航空や医療などのセーフティクリティカルシステムだけでなく、他の分野のシステムでも重要かつ一般的になってきている', FALSE),

(12, '動的テスト実行する前に欠陥を早期に検出できる', FALSE), 
(12, '動的テストでは容易に検出できない欠陥を識別できる', FALSE), 
(12, 'テストプロシージャ―とテスト実行の突き合せによりテストカバレッジを計測できる', TRUE), 
(12, '設計の改善や保守性の高いコードに貢献することで、開発やメンテナンスの生産性を向上できる', FALSE),

(13, '動的テストは保守性の欠陥を検出するのに向いており、静的テストは機能的欠陥を検出するのに向いている', TRUE), 
(13, '動的テストはソフトウェアを実行して発生した故障をもとに欠陥を見つけるが、静的テストは作業成果物の欠陥を直接検出できる', FALSE), 
(13, '動的テストは外部から見える振る舞いに焦点を置くことが多いが、静的テストは作業成果物の整合性と内部品質を向上させる特徴を持つ', FALSE), 
(13, '静的テストと動的テストは、それぞれ異なる種類の欠陥を検出できるため、相互に補完する関係にある', FALSE),

(14, '計画プロセスの主な作業は、レビューの目的、レビュー対象のドキュメント、評価すべき品質特性を定義することである', FALSE), 
(14, '修正と報告プロセスの主な作業は、作業成果物をレビューして、不正な点、提案、質問を書き出すことである', TRUE), 
(14, '共有と分析プロセスの主な作業は、識別した不正を分析し、それらにオーナーとステータスと必要なアクションを割り当て、品質特性を評価して文書化し、これらの情報をもとにレビュー判定することである', FALSE), 
(14, 'レビューの立ち上げプロセスは、個々のレビューに入る前に参加者同士で情報を共有する作業である。具体的には、作業成果物を参加者に共有した上でレビューの範囲を説明し、参加者からの質問に答えて意思疎通を図るなどである', FALSE),

(15, 'マネージャーは、作業成果物のレビューを行って不正を識別する', FALSE), 
(15, 'レビューアとは、レビュー対象の作業成果物を作成した人のことである。レビューで指摘されて不正を識別したら、自分の作った作業成果物を修正する', FALSE), 
(15, 'モデレーターは、効果的なレビューミーティングを運営する人である。参加者の様々な意見の調整を行い、レビューを成功に導く役割を担う', TRUE), 
(15, 'レビューリーダーは、レビューの計画を行う人である。レビューの計画を立て、実行を決定する。また、不適切な結果が発生した場合は、適切にコントロールする役割を担う', FALSE),

(16, 'ホワイトボックステスト技法は、テストベースを分析して適切なテスト条件を作成し、テスト対象のソフトウェアの振る舞いに焦点を当てたテストである', FALSE), 
(16, 'ブラックボックステスト技法は、テスト対象の内部構造と処理に重点を置いたテストで、構造ベースの技法ともよばれている', FALSE), 
(16, '経験ベースのテスト技法は、テスト担当者のスキルと直感、および経験を基にテストする方法である。技法という名前はついているが、担当者に任せる方法なので、特定のやり方、技法があるわけではない', FALSE), 
(16, 'ブラックボックステスト技法は機能テストと非機能テストの両方に適用できる', TRUE),

(17, '状態遷移テストは、画面の遷移に焦点を当てたテストで、ある画面から別の画面に正しく画面が切り替わることを確認するものである', TRUE), 
(17, '状態遷移テストは、コンポーネントやシステムの状態がイベントによってどのように変化するかに焦点を当てたテストで、組み込みソフトウェア業界で幅広く使われている。', FALSE), 
(17, '状態遷移テストで使用する状態遷移表には、状態間の有効な遷移と無効だと思われる遷移の両方を記載する', FALSE), 
(17, '状態遷移の有効遷移カバレッジは、テスト対象の状態が有効に遷移する数の合計数のうち、テストでカバーした遷移の数の割合で計測する', FALSE),

(18, '有効遷移カバレッジ100%は全遷移カバレッジ100%を保証しないが、全状態カバレッジ100%は、有効遷移カバレッジ100％を保証する', TRUE), 
(18, '全状態カバレッジとは、テストで通過した状態の数をすべての状態の数で割った値である', TRUE), 
(18, '100%の全遷移カバレッジを達成するためには、すべての有効遷移だけでなく、無効遷移もテストで通過しなければならないが、無効遷移はテスト実行を試みることが可能なものだけでよい', FALSE), 
(18, '通常、状態遷移図は有効遷移を記載するが、状態遷移表は有効遷移に加えて無効遷移も表現できるので、全遷移カバレッジを測定しやすい', FALSE),

(19, 'ブランチテストは、システムが実装すべきビジネスルールを表現するのに適したデシジョンテーブルを作成してテストする技法である', FALSE), 
(19, 'ステートメントテストは、ステートメント (コード内の文)を通すテストであり、コード内の命令と判定すべてを最低一回は通るようにテストするテスト技法である', FALSE), 
(19, 'ステートメントテストのカバレッジ100%は、ブランチテストのカバレッジ100%を保証しないが、ブランチテスト100%は、ステートメントテストのカバレッジ100%を保証する', TRUE), 
(19, 'ブランチテストは、コード内の判定を最低1回は通るようにテストするものなので、判定結果が真と偽の2つある場合は、どちらか1つを通せばよい', FALSE),

(20, 'エラー推測は、テストデータを複数のパーティションに分類して、各パーティションの代表的な要素だけをテストする技法である', FALSE), 
(20, '探索的テストは形式的ではないテストであるが、活動を体系的に行うためにテストチャーターを作ってセッションベースドテストを行う場合がある', TRUE), 
(20, '探索的テストはフォールト攻撃という系統的なアプローチを用い、最初に経験を用いて起こりうるエラー、欠陥、故障のリストを作り、それを引き起こすテストケースを設計する技法である', FALSE), 
(20, 'エラー推測は、経験に基づいてチェックリストを作成し、それに基づいてテストする技法である。チェックリストは、テストケースに比べてハイレベルなテストである', FALSE),

(21, 'リリース計画では、1回のイテレーションの終わりを見据えて、イテレーションのバックログを考慮した計画を立てる', FALSE), 
(21, 'イテレーション計画は、プロダクトバックログの定義やユーザーストーリーの作成、受け入れ基準の作成を行うものである', FALSE), 
(21, 'リリース計画はイテレーション計画に基づいてイテレーティブな開発が行われ、最後にリリースするタイミングで作成する', FALSE), 
(21, 'リリース計画に関わるテスト担当者は、プロジェクトと品質のリスク分析やユーザーストーリーに関連するテスト工数の見積もり、テストアプローチの決定などを行う', TRUE),

(22, '現在のプロジェクトの早い時期に見積もりが行われるもので、これまでにかかったテスト工数を観測し、それを基に数学モデルを適用してこれからの工数を見積もる方法である', TRUE), 
(22, '複数の専門家が経験に基づいて工数を観測し、その結果を議論して合意したものを見積もりとする方法である。', FALSE), 
(22, '最も楽観的な推定値(a)、最も可能性の高い推定値(m)、最も悲観的な推定値(b)を専門家が作成し、一定の加重算術平均式により見積もりを得る方法である', FALSE), 
(22, '組織内の過去の類似プロジェクトで収集されたテスト工数を基準にして、そのプロジェクトと新規プロジェクトの規模などに応じた比率をかけてテスト工数を見積もる方法である', FALSE),

(23, 'テスト計画書には、テスト条件を落とし込んだものとしてテストケースやテストデータ、テスト環境、トレーサビリティなどの具体的な内容を記載する', FALSE), 
(23, 'テスト計画書には、テストを行うのに必要なテストウェアとして、テストプロシージャ―やテストスイートなどを記載する', FALSE), 
(23, 'テスト計画書には、テストの範囲や目的、リスクを決定したり、テストに対する包括的なアプローチを定義したりする内容が含まれる', TRUE), 
(23, 'プロダクトのテスト計画は、プロダクトのライフサイクル全体を通して行う活動だが、メンテナンスフェーズまでは延長されない', FALSE),

(24, '開始基準が満たされないままにテストを開始すると、難易度ば上がり、時間やコストが増え、リスクが高まる', FALSE), 
(24, '終了基準が満たされていないままにテスト活動を終了すると、未解決の欠陥や潜在的な欠陥が多く残り、リリース後に故障を起こすリスクが高まる', FALSE), 
(24, 'テスト終了基準では、テスト活動を終了するための達成条件を定義する。達成条件には、運用環境が準備できている、メンテナンスチームがアサインできている、ユーザー教育が終了しているなどがある', TRUE), 
(24, 'テスト終了基準を満たしていない場合でもビジネスニーズによりステークホルダーがプロダクトをリリースするリスクを見直して受け入れた場合は、テスト活動を切り上げる場合もある', FALSE),

(25, 'テスト工数に影響する要因には、プロダクトの特性、開発プロセスの特性、人の特性のほか、テストした結果も含まれる。検出した欠陥の数と重要度によって、再作業が必要となる場合があるからである', FALSE), 
(25, 'プロダクトに関連するリスクが高い、テストベースの品質が悪い、プロダクトのく規模が大きい、品質特性の要件が厳しいなどは、どれもテスト工数を大きくする要因である', FALSE), 
(25, '使用している開発モデルやテストプロセス、納期のタイトさなどは、基本的にテスト工数に影響しない。開発プロセスが変わっても、やるべきボリュームは一定である', TRUE), 
(25, 'テストを見積もる技術には、メトリクスベースとエキスパートベースがある。外挿は前者の例で、ワイルドバンドデルファイは後者の例である', FALSE),

(26, 'レビューや静的解析を支援するツールは、DevOpsツールに分類される', FALSE), 
(26, 'リグレッションテストで使う実行ツールやコードカバレッジツールなどは、代表的な静的テストの支援ツールである', FALSE), 
(26, 'ロードテストやストレステストなど、手動では効果的に実行できないテストを支援する性能テストツールは、テストウェアのマネジメント支援ツールに分類される', FALSE), 
(26, 'テストケース作成支援ツールやテストデータ準備ツールなどは、テスト実装の支援ツールに分類される', TRUE),

(27, 'テストケース作成支援ツールやテストデータ準備ツールなどは、テスト実装の支援ツールに分類される', FALSE), 
(27, '静的解析やカバレッジなどのテスト自動化ツールの潜在的リスクとしては、テスト結果の評価の客観性が損なわれることが挙げられる', TRUE), 
(27, 'テスト自動化ツールの潜在的リスクとしては、導入に要する時間やコスト、工数を過小評価することが挙げられる', FALSE), 
(27, 'テスト自動化ツールの潜在的リスクとしては、テストツールの効果を課題に評価したり、ツールに過剰な依存をしたりすることが挙げられる', FALSE);
